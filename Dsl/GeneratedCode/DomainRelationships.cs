//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace FourDeep.Dizzle
{
	/// <summary>
	/// DomainRelationship BoundedContextHasAggregateRoot
	/// Embedding relationship between the Model and Elements
	/// </summary>
	[DslDesign::DisplayNameResource("FourDeep.Dizzle.BoundedContextHasAggregateRoot.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("FourDeep.Dizzle.BoundedContextHasAggregateRoot.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::FourDeep.Dizzle.DizzleDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("7467fecb-02c5-4afe-836f-c1db1d60cc36")]
	public partial class BoundedContextHasAggregateRoot : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// BoundedContextHasAggregateRoot domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7467fecb, 0x02c5, 0x4afe, 0x83, 0x6f, 0xc1, 0xdb, 0x1d, 0x60, 0xcc, 0x36);
	
				
		/// <summary>
		/// Constructor
		/// Creates a BoundedContextHasAggregateRoot link in the same Partition as the given BoundedContext
		/// </summary>
		/// <param name="source">BoundedContext to use as the source of the relationship.</param>
		/// <param name="target">AggregateRoot to use as the target of the relationship.</param>
		public BoundedContextHasAggregateRoot(BoundedContext source, AggregateRoot target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(BoundedContextHasAggregateRoot.BoundedContextDomainRoleId, source), new DslModeling::RoleAssignment(BoundedContextHasAggregateRoot.ElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public BoundedContextHasAggregateRoot(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public BoundedContextHasAggregateRoot(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public BoundedContextHasAggregateRoot(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public BoundedContextHasAggregateRoot(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region BoundedContext domain role code
		
		/// <summary>
		/// BoundedContext domain role Id.
		/// </summary>
		public static readonly global::System.Guid BoundedContextDomainRoleId = new global::System.Guid(0x40a00cf5, 0x6858, 0x4281, 0x95, 0x10, 0x66, 0x13, 0xa6, 0xba, 0x03, 0x03);
		
		/// <summary>
		/// DomainRole BoundedContext
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.Dizzle.BoundedContextHasAggregateRoot/BoundedContext.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.Dizzle.BoundedContextHasAggregateRoot/BoundedContext.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Element", PropertyDisplayNameKey="FourDeep.Dizzle.BoundedContextHasAggregateRoot/BoundedContext.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("40a00cf5-6858-4281-9510-6613a6ba0303")]
		public virtual BoundedContext BoundedContext
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (BoundedContext)DslModeling::DomainRoleInfo.GetRolePlayer(this, BoundedContextDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, BoundedContextDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access BoundedContext of a AggregateRoot
		/// <summary>
		/// Gets BoundedContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static BoundedContext GetBoundedContext(AggregateRoot element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ElementDomainRoleId) as BoundedContext;
		}
		
		/// <summary>
		/// Sets BoundedContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetBoundedContext(AggregateRoot element, BoundedContext newBoundedContext)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ElementDomainRoleId, newBoundedContext);
		}
		#endregion
		#region Element domain role code
		
		/// <summary>
		/// Element domain role Id.
		/// </summary>
		public static readonly global::System.Guid ElementDomainRoleId = new global::System.Guid(0x51b65111, 0x43d3, 0x40d9, 0xa9, 0x31, 0xbf, 0x04, 0xcd, 0x0d, 0xc5, 0x74);
		
		/// <summary>
		/// DomainRole Element
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.Dizzle.BoundedContextHasAggregateRoot/Element.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.Dizzle.BoundedContextHasAggregateRoot/Element.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "BoundedContext", PropertyDisplayNameKey="FourDeep.Dizzle.BoundedContextHasAggregateRoot/Element.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("51b65111-43d3-40d9-a931-bf04cd0dc574")]
		public virtual AggregateRoot Element
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AggregateRoot)DslModeling::DomainRoleInfo.GetRolePlayer(this, ElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Element of a BoundedContext
		/// <summary>
		/// Gets Element.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static AggregateRoot GetElement(BoundedContext element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, BoundedContextDomainRoleId) as AggregateRoot;
		}
		
		/// <summary>
		/// Sets Element.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetElement(BoundedContext element, AggregateRoot newElement)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, BoundedContextDomainRoleId, newElement);
		}
		#endregion
		#region BoundedContext link accessor
		/// <summary>
		/// Get the BoundedContextHasAggregateRoot link to a BoundedContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::FourDeep.Dizzle.BoundedContextHasAggregateRoot GetLinkToElement (global::FourDeep.Dizzle.BoundedContext boundedContextInstance)
		{
			global::System.Collections.Generic.IList<global::FourDeep.Dizzle.BoundedContextHasAggregateRoot> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.BoundedContextHasAggregateRoot>(boundedContextInstance, global::FourDeep.Dizzle.BoundedContextHasAggregateRoot.BoundedContextDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of BoundedContext not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Element link accessor
		/// <summary>
		/// Get the BoundedContextHasAggregateRoot link to a AggregateRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::FourDeep.Dizzle.BoundedContextHasAggregateRoot GetLinkToBoundedContext (global::FourDeep.Dizzle.AggregateRoot elementInstance)
		{
			global::System.Collections.Generic.IList<global::FourDeep.Dizzle.BoundedContextHasAggregateRoot> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.BoundedContextHasAggregateRoot>(elementInstance, global::FourDeep.Dizzle.BoundedContextHasAggregateRoot.ElementDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Element not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region BoundedContextHasAggregateRoot instance accessors
		
		/// <summary>
		/// Get any BoundedContextHasAggregateRoot links between a given BoundedContext and a AggregateRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::FourDeep.Dizzle.BoundedContextHasAggregateRoot> GetLinks( global::FourDeep.Dizzle.BoundedContext source, global::FourDeep.Dizzle.AggregateRoot target )
		{
			global::System.Collections.Generic.List<global::FourDeep.Dizzle.BoundedContextHasAggregateRoot> outLinks = new global::System.Collections.Generic.List<global::FourDeep.Dizzle.BoundedContextHasAggregateRoot>();
			global::System.Collections.Generic.IList<global::FourDeep.Dizzle.BoundedContextHasAggregateRoot> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.BoundedContextHasAggregateRoot>(source, global::FourDeep.Dizzle.BoundedContextHasAggregateRoot.BoundedContextDomainRoleId);
			foreach ( global::FourDeep.Dizzle.BoundedContextHasAggregateRoot link in links )
			{
				if ( target.Equals(link.Element) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one BoundedContextHasAggregateRoot link between a given BoundedContextand a AggregateRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::FourDeep.Dizzle.BoundedContextHasAggregateRoot GetLink( global::FourDeep.Dizzle.BoundedContext source, global::FourDeep.Dizzle.AggregateRoot target )
		{
			global::System.Collections.Generic.IList<global::FourDeep.Dizzle.BoundedContextHasAggregateRoot> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.BoundedContextHasAggregateRoot>(source, global::FourDeep.Dizzle.BoundedContextHasAggregateRoot.BoundedContextDomainRoleId);
			foreach ( global::FourDeep.Dizzle.BoundedContextHasAggregateRoot link in links )
			{
				if ( target.Equals(link.Element) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace FourDeep.Dizzle
{
	/// <summary>
	/// DomainRelationship AggregateRootHasAggregateState
	/// Description for FourDeep.Dizzle.AggregateRootHasAggregateState
	/// </summary>
	[DslDesign::DisplayNameResource("FourDeep.Dizzle.AggregateRootHasAggregateState.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("FourDeep.Dizzle.AggregateRootHasAggregateState.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::FourDeep.Dizzle.DizzleDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("e8630a90-a682-45c0-b126-549584baef48")]
	public partial class AggregateRootHasAggregateState : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// AggregateRootHasAggregateState domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe8630a90, 0xa682, 0x45c0, 0xb1, 0x26, 0x54, 0x95, 0x84, 0xba, 0xef, 0x48);
	
				
		/// <summary>
		/// Constructor
		/// Creates a AggregateRootHasAggregateState link in the same Partition as the given AggregateRoot
		/// </summary>
		/// <param name="source">AggregateRoot to use as the source of the relationship.</param>
		/// <param name="target">AggregateState to use as the target of the relationship.</param>
		public AggregateRootHasAggregateState(AggregateRoot source, AggregateState target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(AggregateRootHasAggregateState.AggregateRootDomainRoleId, source), new DslModeling::RoleAssignment(AggregateRootHasAggregateState.AggregateStateDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AggregateRootHasAggregateState(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AggregateRootHasAggregateState(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AggregateRootHasAggregateState(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AggregateRootHasAggregateState(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region AggregateRoot domain role code
		
		/// <summary>
		/// AggregateRoot domain role Id.
		/// </summary>
		public static readonly global::System.Guid AggregateRootDomainRoleId = new global::System.Guid(0xc2544906, 0xe56c, 0x47b5, 0x8b, 0x61, 0xbf, 0x71, 0x05, 0xb7, 0x95, 0x56);
		
		/// <summary>
		/// DomainRole AggregateRoot
		/// Description for FourDeep.Dizzle.AggregateRootHasAggregateState.AggregateRoot
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.Dizzle.AggregateRootHasAggregateState/AggregateRoot.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.Dizzle.AggregateRootHasAggregateState/AggregateRoot.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "AggregateState", PropertyDisplayNameKey="FourDeep.Dizzle.AggregateRootHasAggregateState/AggregateRoot.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("c2544906-e56c-47b5-8b61-bf7105b79556")]
		public virtual AggregateRoot AggregateRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AggregateRoot)DslModeling::DomainRoleInfo.GetRolePlayer(this, AggregateRootDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AggregateRootDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AggregateRoot of a AggregateState
		/// <summary>
		/// Gets AggregateRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static AggregateRoot GetAggregateRoot(AggregateState element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AggregateStateDomainRoleId) as AggregateRoot;
		}
		
		/// <summary>
		/// Sets AggregateRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAggregateRoot(AggregateState element, AggregateRoot newAggregateRoot)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AggregateStateDomainRoleId, newAggregateRoot);
		}
		#endregion
		#region AggregateState domain role code
		
		/// <summary>
		/// AggregateState domain role Id.
		/// </summary>
		public static readonly global::System.Guid AggregateStateDomainRoleId = new global::System.Guid(0xcd32310c, 0xe483, 0x4810, 0xa3, 0xc0, 0x26, 0xd8, 0x19, 0x32, 0x41, 0xbe);
		
		/// <summary>
		/// DomainRole AggregateState
		/// Description for FourDeep.Dizzle.AggregateRootHasAggregateState.AggregateState
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.Dizzle.AggregateRootHasAggregateState/AggregateState.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.Dizzle.AggregateRootHasAggregateState/AggregateState.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "AggregateRoot", PropertyDisplayNameKey="FourDeep.Dizzle.AggregateRootHasAggregateState/AggregateState.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("cd32310c-e483-4810-a3c0-26d8193241be")]
		public virtual AggregateState AggregateState
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AggregateState)DslModeling::DomainRoleInfo.GetRolePlayer(this, AggregateStateDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AggregateStateDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AggregateState of a AggregateRoot
		/// <summary>
		/// Gets AggregateState.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static AggregateState GetAggregateState(AggregateRoot element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AggregateRootDomainRoleId) as AggregateState;
		}
		
		/// <summary>
		/// Sets AggregateState.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAggregateState(AggregateRoot element, AggregateState newAggregateState)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AggregateRootDomainRoleId, newAggregateState);
		}
		#endregion
		#region AggregateRoot link accessor
		/// <summary>
		/// Get the AggregateRootHasAggregateState link to a AggregateRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::FourDeep.Dizzle.AggregateRootHasAggregateState GetLinkToAggregateState (global::FourDeep.Dizzle.AggregateRoot aggregateRootInstance)
		{
			global::System.Collections.Generic.IList<global::FourDeep.Dizzle.AggregateRootHasAggregateState> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.AggregateRootHasAggregateState>(aggregateRootInstance, global::FourDeep.Dizzle.AggregateRootHasAggregateState.AggregateRootDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of AggregateRoot not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AggregateState link accessor
		/// <summary>
		/// Get the AggregateRootHasAggregateState link to a AggregateState.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::FourDeep.Dizzle.AggregateRootHasAggregateState GetLinkToAggregateRoot (global::FourDeep.Dizzle.AggregateState aggregateStateInstance)
		{
			global::System.Collections.Generic.IList<global::FourDeep.Dizzle.AggregateRootHasAggregateState> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.AggregateRootHasAggregateState>(aggregateStateInstance, global::FourDeep.Dizzle.AggregateRootHasAggregateState.AggregateStateDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of AggregateState not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AggregateRootHasAggregateState instance accessors
		
		/// <summary>
		/// Get any AggregateRootHasAggregateState links between a given AggregateRoot and a AggregateState.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::FourDeep.Dizzle.AggregateRootHasAggregateState> GetLinks( global::FourDeep.Dizzle.AggregateRoot source, global::FourDeep.Dizzle.AggregateState target )
		{
			global::System.Collections.Generic.List<global::FourDeep.Dizzle.AggregateRootHasAggregateState> outLinks = new global::System.Collections.Generic.List<global::FourDeep.Dizzle.AggregateRootHasAggregateState>();
			global::System.Collections.Generic.IList<global::FourDeep.Dizzle.AggregateRootHasAggregateState> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.AggregateRootHasAggregateState>(source, global::FourDeep.Dizzle.AggregateRootHasAggregateState.AggregateRootDomainRoleId);
			foreach ( global::FourDeep.Dizzle.AggregateRootHasAggregateState link in links )
			{
				if ( target.Equals(link.AggregateState) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one AggregateRootHasAggregateState link between a given AggregateRootand a AggregateState.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::FourDeep.Dizzle.AggregateRootHasAggregateState GetLink( global::FourDeep.Dizzle.AggregateRoot source, global::FourDeep.Dizzle.AggregateState target )
		{
			global::System.Collections.Generic.IList<global::FourDeep.Dizzle.AggregateRootHasAggregateState> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.AggregateRootHasAggregateState>(source, global::FourDeep.Dizzle.AggregateRootHasAggregateState.AggregateRootDomainRoleId);
			foreach ( global::FourDeep.Dizzle.AggregateRootHasAggregateState link in links )
			{
				if ( target.Equals(link.AggregateState) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace FourDeep.Dizzle
{
	/// <summary>
	/// DomainRelationship BoundedContextReferencesAggregateState
	/// Description for FourDeep.Dizzle.BoundedContextReferencesAggregateState
	/// </summary>
	[DslDesign::DisplayNameResource("FourDeep.Dizzle.BoundedContextReferencesAggregateState.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("FourDeep.Dizzle.BoundedContextReferencesAggregateState.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::FourDeep.Dizzle.DizzleDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("333ff519-acf9-439b-864a-379b47696798")]
	public partial class BoundedContextReferencesAggregateState : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// BoundedContextReferencesAggregateState domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x333ff519, 0xacf9, 0x439b, 0x86, 0x4a, 0x37, 0x9b, 0x47, 0x69, 0x67, 0x98);
	
				
		/// <summary>
		/// Constructor
		/// Creates a BoundedContextReferencesAggregateState link in the same Partition as the given BoundedContext
		/// </summary>
		/// <param name="source">BoundedContext to use as the source of the relationship.</param>
		/// <param name="target">AggregateState to use as the target of the relationship.</param>
		public BoundedContextReferencesAggregateState(BoundedContext source, AggregateState target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(BoundedContextReferencesAggregateState.BoundedContextDomainRoleId, source), new DslModeling::RoleAssignment(BoundedContextReferencesAggregateState.AggregateStateDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public BoundedContextReferencesAggregateState(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public BoundedContextReferencesAggregateState(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public BoundedContextReferencesAggregateState(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public BoundedContextReferencesAggregateState(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region BoundedContext domain role code
		
		/// <summary>
		/// BoundedContext domain role Id.
		/// </summary>
		public static readonly global::System.Guid BoundedContextDomainRoleId = new global::System.Guid(0x33b93d86, 0x2482, 0x4bde, 0xbc, 0x74, 0x3c, 0xf6, 0xd0, 0x74, 0xba, 0x72);
		
		/// <summary>
		/// DomainRole BoundedContext
		/// Description for
		/// FourDeep.Dizzle.BoundedContextReferencesAggregateState.BoundedContext
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.Dizzle.BoundedContextReferencesAggregateState/BoundedContext.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.Dizzle.BoundedContextReferencesAggregateState/BoundedContext.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "AggregateState", PropertyDisplayNameKey="FourDeep.Dizzle.BoundedContextReferencesAggregateState/BoundedContext.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("33b93d86-2482-4bde-bc74-3cf6d074ba72")]
		public virtual BoundedContext BoundedContext
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (BoundedContext)DslModeling::DomainRoleInfo.GetRolePlayer(this, BoundedContextDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, BoundedContextDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access BoundedContext of a AggregateState
		/// <summary>
		/// Gets BoundedContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static BoundedContext GetBoundedContext(AggregateState element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AggregateStateDomainRoleId) as BoundedContext;
		}
		
		/// <summary>
		/// Sets BoundedContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetBoundedContext(AggregateState element, BoundedContext newBoundedContext)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AggregateStateDomainRoleId, newBoundedContext);
		}
		#endregion
		#region AggregateState domain role code
		
		/// <summary>
		/// AggregateState domain role Id.
		/// </summary>
		public static readonly global::System.Guid AggregateStateDomainRoleId = new global::System.Guid(0x6f2e7fe5, 0x12f2, 0x4d63, 0x90, 0x8a, 0xf6, 0x02, 0x4e, 0x13, 0x3c, 0x56);
		
		/// <summary>
		/// DomainRole AggregateState
		/// Description for
		/// FourDeep.Dizzle.BoundedContextReferencesAggregateState.AggregateState
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.Dizzle.BoundedContextReferencesAggregateState/AggregateState.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.Dizzle.BoundedContextReferencesAggregateState/AggregateState.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "BoundedContext", PropertyDisplayNameKey="FourDeep.Dizzle.BoundedContextReferencesAggregateState/AggregateState.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("6f2e7fe5-12f2-4d63-908a-f6024e133c56")]
		public virtual AggregateState AggregateState
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AggregateState)DslModeling::DomainRoleInfo.GetRolePlayer(this, AggregateStateDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AggregateStateDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AggregateState of a BoundedContext
		/// <summary>
		/// Gets AggregateState.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static AggregateState GetAggregateState(BoundedContext element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, BoundedContextDomainRoleId) as AggregateState;
		}
		
		/// <summary>
		/// Sets AggregateState.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAggregateState(BoundedContext element, AggregateState newAggregateState)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, BoundedContextDomainRoleId, newAggregateState);
		}
		#endregion
		#region BoundedContext link accessor
		/// <summary>
		/// Get the BoundedContextReferencesAggregateState link to a BoundedContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::FourDeep.Dizzle.BoundedContextReferencesAggregateState GetLinkToAggregateState (global::FourDeep.Dizzle.BoundedContext boundedContextInstance)
		{
			global::System.Collections.Generic.IList<global::FourDeep.Dizzle.BoundedContextReferencesAggregateState> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.BoundedContextReferencesAggregateState>(boundedContextInstance, global::FourDeep.Dizzle.BoundedContextReferencesAggregateState.BoundedContextDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of BoundedContext not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AggregateState link accessor
		/// <summary>
		/// Get the BoundedContextReferencesAggregateState link to a AggregateState.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::FourDeep.Dizzle.BoundedContextReferencesAggregateState GetLinkToBoundedContext (global::FourDeep.Dizzle.AggregateState aggregateStateInstance)
		{
			global::System.Collections.Generic.IList<global::FourDeep.Dizzle.BoundedContextReferencesAggregateState> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.BoundedContextReferencesAggregateState>(aggregateStateInstance, global::FourDeep.Dizzle.BoundedContextReferencesAggregateState.AggregateStateDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of AggregateState not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region BoundedContextReferencesAggregateState instance accessors
		
		/// <summary>
		/// Get any BoundedContextReferencesAggregateState links between a given BoundedContext and a AggregateState.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::FourDeep.Dizzle.BoundedContextReferencesAggregateState> GetLinks( global::FourDeep.Dizzle.BoundedContext source, global::FourDeep.Dizzle.AggregateState target )
		{
			global::System.Collections.Generic.List<global::FourDeep.Dizzle.BoundedContextReferencesAggregateState> outLinks = new global::System.Collections.Generic.List<global::FourDeep.Dizzle.BoundedContextReferencesAggregateState>();
			global::System.Collections.Generic.IList<global::FourDeep.Dizzle.BoundedContextReferencesAggregateState> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.BoundedContextReferencesAggregateState>(source, global::FourDeep.Dizzle.BoundedContextReferencesAggregateState.BoundedContextDomainRoleId);
			foreach ( global::FourDeep.Dizzle.BoundedContextReferencesAggregateState link in links )
			{
				if ( target.Equals(link.AggregateState) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one BoundedContextReferencesAggregateState link between a given BoundedContextand a AggregateState.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::FourDeep.Dizzle.BoundedContextReferencesAggregateState GetLink( global::FourDeep.Dizzle.BoundedContext source, global::FourDeep.Dizzle.AggregateState target )
		{
			global::System.Collections.Generic.IList<global::FourDeep.Dizzle.BoundedContextReferencesAggregateState> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.BoundedContextReferencesAggregateState>(source, global::FourDeep.Dizzle.BoundedContextReferencesAggregateState.BoundedContextDomainRoleId);
			foreach ( global::FourDeep.Dizzle.BoundedContextReferencesAggregateState link in links )
			{
				if ( target.Equals(link.AggregateState) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace FourDeep.Dizzle
{
	/// <summary>
	/// DomainRelationship AggregateRootHandlesDomainCommands
	/// Description for FourDeep.Dizzle.AggregateRootHandlesDomainCommands
	/// </summary>
	[DslDesign::DisplayNameResource("FourDeep.Dizzle.AggregateRootHandlesDomainCommands.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("FourDeep.Dizzle.AggregateRootHandlesDomainCommands.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::FourDeep.Dizzle.DizzleDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("8d40e754-9c71-42d3-a254-93134cbb3e1f")]
	public partial class AggregateRootHandlesDomainCommands : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// AggregateRootHandlesDomainCommands domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8d40e754, 0x9c71, 0x42d3, 0xa2, 0x54, 0x93, 0x13, 0x4c, 0xbb, 0x3e, 0x1f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a AggregateRootHandlesDomainCommands link in the same Partition as the given AggregateRoot
		/// </summary>
		/// <param name="source">AggregateRoot to use as the source of the relationship.</param>
		/// <param name="target">DomainCommand to use as the target of the relationship.</param>
		public AggregateRootHandlesDomainCommands(AggregateRoot source, DomainCommand target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(AggregateRootHandlesDomainCommands.AggregateRootDomainRoleId, source), new DslModeling::RoleAssignment(AggregateRootHandlesDomainCommands.DomainCommandDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AggregateRootHandlesDomainCommands(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AggregateRootHandlesDomainCommands(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AggregateRootHandlesDomainCommands(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AggregateRootHandlesDomainCommands(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region AggregateRoot domain role code
		
		/// <summary>
		/// AggregateRoot domain role Id.
		/// </summary>
		public static readonly global::System.Guid AggregateRootDomainRoleId = new global::System.Guid(0x992fbb19, 0x181d, 0x49bb, 0x85, 0x21, 0xf7, 0x8e, 0xf0, 0x97, 0xee, 0x12);
		
		/// <summary>
		/// DomainRole AggregateRoot
		/// Description for FourDeep.Dizzle.AggregateRootHandlesDomainCommands.AggregateRoot
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.Dizzle.AggregateRootHandlesDomainCommands/AggregateRoot.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.Dizzle.AggregateRootHandlesDomainCommands/AggregateRoot.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DomainCommands", PropertyDisplayNameKey="FourDeep.Dizzle.AggregateRootHandlesDomainCommands/AggregateRoot.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("992fbb19-181d-49bb-8521-f78ef097ee12")]
		public virtual AggregateRoot AggregateRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AggregateRoot)DslModeling::DomainRoleInfo.GetRolePlayer(this, AggregateRootDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AggregateRootDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AggregateRoot of a DomainCommand
		/// <summary>
		/// Gets AggregateRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static AggregateRoot GetAggregateRoot(DomainCommand element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DomainCommandDomainRoleId) as AggregateRoot;
		}
		
		/// <summary>
		/// Sets AggregateRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAggregateRoot(DomainCommand element, AggregateRoot newAggregateRoot)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DomainCommandDomainRoleId, newAggregateRoot);
		}
		#endregion
		#region DomainCommand domain role code
		
		/// <summary>
		/// DomainCommand domain role Id.
		/// </summary>
		public static readonly global::System.Guid DomainCommandDomainRoleId = new global::System.Guid(0xbd4869be, 0x02af, 0x4236, 0x8c, 0xc1, 0xd4, 0xae, 0x12, 0x12, 0x1c, 0x4c);
		
		/// <summary>
		/// DomainRole DomainCommand
		/// Description for FourDeep.Dizzle.AggregateRootHandlesDomainCommands.DomainCommand
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.Dizzle.AggregateRootHandlesDomainCommands/DomainCommand.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.Dizzle.AggregateRootHandlesDomainCommands/DomainCommand.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "AggregateRoot", PropertyDisplayNameKey="FourDeep.Dizzle.AggregateRootHandlesDomainCommands/DomainCommand.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("bd4869be-02af-4236-8cc1-d4ae12121c4c")]
		public virtual DomainCommand DomainCommand
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DomainCommand)DslModeling::DomainRoleInfo.GetRolePlayer(this, DomainCommandDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DomainCommandDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DomainCommands of a AggregateRoot
		/// <summary>
		/// Gets a list of DomainCommands.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DomainCommand> GetDomainCommands(AggregateRoot element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<DomainCommand>, DomainCommand>(element, AggregateRootDomainRoleId);
		}
		#endregion
		#region AggregateRoot link accessor
		/// <summary>
		/// Get the list of AggregateRootHandlesDomainCommands links to a AggregateRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::FourDeep.Dizzle.AggregateRootHandlesDomainCommands> GetLinksToDomainCommands ( global::FourDeep.Dizzle.AggregateRoot aggregateRootInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.AggregateRootHandlesDomainCommands>(aggregateRootInstance, global::FourDeep.Dizzle.AggregateRootHandlesDomainCommands.AggregateRootDomainRoleId);
		}
		#endregion
		#region DomainCommand link accessor
		/// <summary>
		/// Get the AggregateRootHandlesDomainCommands link to a DomainCommand.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::FourDeep.Dizzle.AggregateRootHandlesDomainCommands GetLinkToAggregateRoot (global::FourDeep.Dizzle.DomainCommand domainCommandInstance)
		{
			global::System.Collections.Generic.IList<global::FourDeep.Dizzle.AggregateRootHandlesDomainCommands> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.AggregateRootHandlesDomainCommands>(domainCommandInstance, global::FourDeep.Dizzle.AggregateRootHandlesDomainCommands.DomainCommandDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DomainCommand not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AggregateRootHandlesDomainCommands instance accessors
		
		/// <summary>
		/// Get any AggregateRootHandlesDomainCommands links between a given AggregateRoot and a DomainCommand.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::FourDeep.Dizzle.AggregateRootHandlesDomainCommands> GetLinks( global::FourDeep.Dizzle.AggregateRoot source, global::FourDeep.Dizzle.DomainCommand target )
		{
			global::System.Collections.Generic.List<global::FourDeep.Dizzle.AggregateRootHandlesDomainCommands> outLinks = new global::System.Collections.Generic.List<global::FourDeep.Dizzle.AggregateRootHandlesDomainCommands>();
			global::System.Collections.Generic.IList<global::FourDeep.Dizzle.AggregateRootHandlesDomainCommands> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.AggregateRootHandlesDomainCommands>(source, global::FourDeep.Dizzle.AggregateRootHandlesDomainCommands.AggregateRootDomainRoleId);
			foreach ( global::FourDeep.Dizzle.AggregateRootHandlesDomainCommands link in links )
			{
				if ( target.Equals(link.DomainCommand) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one AggregateRootHandlesDomainCommands link between a given AggregateRootand a DomainCommand.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::FourDeep.Dizzle.AggregateRootHandlesDomainCommands GetLink( global::FourDeep.Dizzle.AggregateRoot source, global::FourDeep.Dizzle.DomainCommand target )
		{
			global::System.Collections.Generic.IList<global::FourDeep.Dizzle.AggregateRootHandlesDomainCommands> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.AggregateRootHandlesDomainCommands>(source, global::FourDeep.Dizzle.AggregateRootHandlesDomainCommands.AggregateRootDomainRoleId);
			foreach ( global::FourDeep.Dizzle.AggregateRootHandlesDomainCommands link in links )
			{
				if ( target.Equals(link.DomainCommand) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace FourDeep.Dizzle
{
	/// <summary>
	/// DomainRelationship BoundedContextHasDomainCommands
	/// Description for FourDeep.Dizzle.BoundedContextHasDomainCommands
	/// </summary>
	[DslDesign::DisplayNameResource("FourDeep.Dizzle.BoundedContextHasDomainCommands.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("FourDeep.Dizzle.BoundedContextHasDomainCommands.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::FourDeep.Dizzle.DizzleDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("130e8d14-a4fb-4024-b05b-98ea98ebbc3d")]
	public partial class BoundedContextHasDomainCommands : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// BoundedContextHasDomainCommands domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x130e8d14, 0xa4fb, 0x4024, 0xb0, 0x5b, 0x98, 0xea, 0x98, 0xeb, 0xbc, 0x3d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a BoundedContextHasDomainCommands link in the same Partition as the given BoundedContext
		/// </summary>
		/// <param name="source">BoundedContext to use as the source of the relationship.</param>
		/// <param name="target">DomainCommand to use as the target of the relationship.</param>
		public BoundedContextHasDomainCommands(BoundedContext source, DomainCommand target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(BoundedContextHasDomainCommands.BoundedContextDomainRoleId, source), new DslModeling::RoleAssignment(BoundedContextHasDomainCommands.DomainCommandDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public BoundedContextHasDomainCommands(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public BoundedContextHasDomainCommands(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public BoundedContextHasDomainCommands(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public BoundedContextHasDomainCommands(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region BoundedContext domain role code
		
		/// <summary>
		/// BoundedContext domain role Id.
		/// </summary>
		public static readonly global::System.Guid BoundedContextDomainRoleId = new global::System.Guid(0xc59cce0f, 0x413e, 0x46e7, 0x86, 0xb2, 0x78, 0x9d, 0xac, 0x2b, 0x93, 0x70);
		
		/// <summary>
		/// DomainRole BoundedContext
		/// Description for FourDeep.Dizzle.BoundedContextHasDomainCommands.BoundedContext
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.Dizzle.BoundedContextHasDomainCommands/BoundedContext.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.Dizzle.BoundedContextHasDomainCommands/BoundedContext.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DomainCommands", PropertyDisplayNameKey="FourDeep.Dizzle.BoundedContextHasDomainCommands/BoundedContext.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c59cce0f-413e-46e7-86b2-789dac2b9370")]
		public virtual BoundedContext BoundedContext
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (BoundedContext)DslModeling::DomainRoleInfo.GetRolePlayer(this, BoundedContextDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, BoundedContextDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access BoundedContext of a DomainCommand
		/// <summary>
		/// Gets BoundedContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static BoundedContext GetBoundedContext(DomainCommand element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DomainCommandDomainRoleId) as BoundedContext;
		}
		
		/// <summary>
		/// Sets BoundedContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetBoundedContext(DomainCommand element, BoundedContext newBoundedContext)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DomainCommandDomainRoleId, newBoundedContext);
		}
		#endregion
		#region DomainCommand domain role code
		
		/// <summary>
		/// DomainCommand domain role Id.
		/// </summary>
		public static readonly global::System.Guid DomainCommandDomainRoleId = new global::System.Guid(0xa6e6476a, 0x1c5a, 0x410d, 0x86, 0x51, 0xde, 0x2a, 0xf5, 0x2d, 0xed, 0xca);
		
		/// <summary>
		/// DomainRole DomainCommand
		/// Description for FourDeep.Dizzle.BoundedContextHasDomainCommands.DomainCommand
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.Dizzle.BoundedContextHasDomainCommands/DomainCommand.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.Dizzle.BoundedContextHasDomainCommands/DomainCommand.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "BoundedContext", PropertyDisplayNameKey="FourDeep.Dizzle.BoundedContextHasDomainCommands/DomainCommand.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("a6e6476a-1c5a-410d-8651-de2af52dedca")]
		public virtual DomainCommand DomainCommand
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DomainCommand)DslModeling::DomainRoleInfo.GetRolePlayer(this, DomainCommandDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DomainCommandDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DomainCommands of a BoundedContext
		/// <summary>
		/// Gets a list of DomainCommands.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DomainCommand> GetDomainCommands(BoundedContext element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<DomainCommand>, DomainCommand>(element, BoundedContextDomainRoleId);
		}
		#endregion
		#region BoundedContext link accessor
		/// <summary>
		/// Get the list of BoundedContextHasDomainCommands links to a BoundedContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::FourDeep.Dizzle.BoundedContextHasDomainCommands> GetLinksToDomainCommands ( global::FourDeep.Dizzle.BoundedContext boundedContextInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.BoundedContextHasDomainCommands>(boundedContextInstance, global::FourDeep.Dizzle.BoundedContextHasDomainCommands.BoundedContextDomainRoleId);
		}
		#endregion
		#region DomainCommand link accessor
		/// <summary>
		/// Get the BoundedContextHasDomainCommands link to a DomainCommand.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::FourDeep.Dizzle.BoundedContextHasDomainCommands GetLinkToBoundedContext (global::FourDeep.Dizzle.DomainCommand domainCommandInstance)
		{
			global::System.Collections.Generic.IList<global::FourDeep.Dizzle.BoundedContextHasDomainCommands> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.BoundedContextHasDomainCommands>(domainCommandInstance, global::FourDeep.Dizzle.BoundedContextHasDomainCommands.DomainCommandDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DomainCommand not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region BoundedContextHasDomainCommands instance accessors
		
		/// <summary>
		/// Get any BoundedContextHasDomainCommands links between a given BoundedContext and a DomainCommand.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::FourDeep.Dizzle.BoundedContextHasDomainCommands> GetLinks( global::FourDeep.Dizzle.BoundedContext source, global::FourDeep.Dizzle.DomainCommand target )
		{
			global::System.Collections.Generic.List<global::FourDeep.Dizzle.BoundedContextHasDomainCommands> outLinks = new global::System.Collections.Generic.List<global::FourDeep.Dizzle.BoundedContextHasDomainCommands>();
			global::System.Collections.Generic.IList<global::FourDeep.Dizzle.BoundedContextHasDomainCommands> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.BoundedContextHasDomainCommands>(source, global::FourDeep.Dizzle.BoundedContextHasDomainCommands.BoundedContextDomainRoleId);
			foreach ( global::FourDeep.Dizzle.BoundedContextHasDomainCommands link in links )
			{
				if ( target.Equals(link.DomainCommand) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one BoundedContextHasDomainCommands link between a given BoundedContextand a DomainCommand.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::FourDeep.Dizzle.BoundedContextHasDomainCommands GetLink( global::FourDeep.Dizzle.BoundedContext source, global::FourDeep.Dizzle.DomainCommand target )
		{
			global::System.Collections.Generic.IList<global::FourDeep.Dizzle.BoundedContextHasDomainCommands> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.BoundedContextHasDomainCommands>(source, global::FourDeep.Dizzle.BoundedContextHasDomainCommands.BoundedContextDomainRoleId);
			foreach ( global::FourDeep.Dizzle.BoundedContextHasDomainCommands link in links )
			{
				if ( target.Equals(link.DomainCommand) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace FourDeep.Dizzle
{
	/// <summary>
	/// DomainRelationship BoundedContextHasProperties
	/// Description for FourDeep.Dizzle.BoundedContextHasProperties
	/// </summary>
	[DslDesign::DisplayNameResource("FourDeep.Dizzle.BoundedContextHasProperties.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("FourDeep.Dizzle.BoundedContextHasProperties.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::FourDeep.Dizzle.DizzleDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("8138328f-eb7c-4e11-bc3c-344acd9c9f03")]
	public partial class BoundedContextHasProperties : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// BoundedContextHasProperties domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8138328f, 0xeb7c, 0x4e11, 0xbc, 0x3c, 0x34, 0x4a, 0xcd, 0x9c, 0x9f, 0x03);
	
				
		/// <summary>
		/// Constructor
		/// Creates a BoundedContextHasProperties link in the same Partition as the given BoundedContext
		/// </summary>
		/// <param name="source">BoundedContext to use as the source of the relationship.</param>
		/// <param name="target">Property to use as the target of the relationship.</param>
		public BoundedContextHasProperties(BoundedContext source, Property target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(BoundedContextHasProperties.BoundedContextDomainRoleId, source), new DslModeling::RoleAssignment(BoundedContextHasProperties.PropertyDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public BoundedContextHasProperties(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public BoundedContextHasProperties(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public BoundedContextHasProperties(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public BoundedContextHasProperties(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region BoundedContext domain role code
		
		/// <summary>
		/// BoundedContext domain role Id.
		/// </summary>
		public static readonly global::System.Guid BoundedContextDomainRoleId = new global::System.Guid(0xfca40bac, 0xcea9, 0x45b0, 0x89, 0x36, 0xf9, 0x0d, 0xe8, 0xc2, 0x75, 0xcf);
		
		/// <summary>
		/// DomainRole BoundedContext
		/// Description for FourDeep.Dizzle.BoundedContextHasProperties.BoundedContext
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.Dizzle.BoundedContextHasProperties/BoundedContext.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.Dizzle.BoundedContextHasProperties/BoundedContext.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Properties", PropertyDisplayNameKey="FourDeep.Dizzle.BoundedContextHasProperties/BoundedContext.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("fca40bac-cea9-45b0-8936-f90de8c275cf")]
		public virtual BoundedContext BoundedContext
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (BoundedContext)DslModeling::DomainRoleInfo.GetRolePlayer(this, BoundedContextDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, BoundedContextDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access BoundedContext of a Property
		/// <summary>
		/// Gets BoundedContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static BoundedContext GetBoundedContext(Property element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PropertyDomainRoleId) as BoundedContext;
		}
		
		/// <summary>
		/// Sets BoundedContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetBoundedContext(Property element, BoundedContext newBoundedContext)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PropertyDomainRoleId, newBoundedContext);
		}
		#endregion
		#region Property domain role code
		
		/// <summary>
		/// Property domain role Id.
		/// </summary>
		public static readonly global::System.Guid PropertyDomainRoleId = new global::System.Guid(0x043764c4, 0xaf19, 0x4711, 0x93, 0x60, 0x52, 0x18, 0x96, 0xac, 0x53, 0x2c);
		
		/// <summary>
		/// DomainRole Property
		/// Description for FourDeep.Dizzle.BoundedContextHasProperties.Property
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.Dizzle.BoundedContextHasProperties/Property.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.Dizzle.BoundedContextHasProperties/Property.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "BoundedContext", PropertyDisplayNameKey="FourDeep.Dizzle.BoundedContextHasProperties/Property.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("043764c4-af19-4711-9360-521896ac532c")]
		public virtual Property Property
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Property)DslModeling::DomainRoleInfo.GetRolePlayer(this, PropertyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PropertyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Properties of a BoundedContext
		/// <summary>
		/// Gets a list of Properties.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Property> GetProperties(BoundedContext element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Property>, Property>(element, BoundedContextDomainRoleId);
		}
		#endregion
		#region BoundedContext link accessor
		/// <summary>
		/// Get the list of BoundedContextHasProperties links to a BoundedContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::FourDeep.Dizzle.BoundedContextHasProperties> GetLinksToProperties ( global::FourDeep.Dizzle.BoundedContext boundedContextInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.BoundedContextHasProperties>(boundedContextInstance, global::FourDeep.Dizzle.BoundedContextHasProperties.BoundedContextDomainRoleId);
		}
		#endregion
		#region Property link accessor
		/// <summary>
		/// Get the BoundedContextHasProperties link to a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::FourDeep.Dizzle.BoundedContextHasProperties GetLinkToBoundedContext (global::FourDeep.Dizzle.Property propertyInstance)
		{
			global::System.Collections.Generic.IList<global::FourDeep.Dizzle.BoundedContextHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.BoundedContextHasProperties>(propertyInstance, global::FourDeep.Dizzle.BoundedContextHasProperties.PropertyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Property not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region BoundedContextHasProperties instance accessors
		
		/// <summary>
		/// Get any BoundedContextHasProperties links between a given BoundedContext and a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::FourDeep.Dizzle.BoundedContextHasProperties> GetLinks( global::FourDeep.Dizzle.BoundedContext source, global::FourDeep.Dizzle.Property target )
		{
			global::System.Collections.Generic.List<global::FourDeep.Dizzle.BoundedContextHasProperties> outLinks = new global::System.Collections.Generic.List<global::FourDeep.Dizzle.BoundedContextHasProperties>();
			global::System.Collections.Generic.IList<global::FourDeep.Dizzle.BoundedContextHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.BoundedContextHasProperties>(source, global::FourDeep.Dizzle.BoundedContextHasProperties.BoundedContextDomainRoleId);
			foreach ( global::FourDeep.Dizzle.BoundedContextHasProperties link in links )
			{
				if ( target.Equals(link.Property) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one BoundedContextHasProperties link between a given BoundedContextand a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::FourDeep.Dizzle.BoundedContextHasProperties GetLink( global::FourDeep.Dizzle.BoundedContext source, global::FourDeep.Dizzle.Property target )
		{
			global::System.Collections.Generic.IList<global::FourDeep.Dizzle.BoundedContextHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.BoundedContextHasProperties>(source, global::FourDeep.Dizzle.BoundedContextHasProperties.BoundedContextDomainRoleId);
			foreach ( global::FourDeep.Dizzle.BoundedContextHasProperties link in links )
			{
				if ( target.Equals(link.Property) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace FourDeep.Dizzle
{
	/// <summary>
	/// DomainRelationship BoundedContextHasViews
	/// Description for FourDeep.Dizzle.BoundedContextHasViews
	/// </summary>
	[DslDesign::DisplayNameResource("FourDeep.Dizzle.BoundedContextHasViews.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("FourDeep.Dizzle.BoundedContextHasViews.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::FourDeep.Dizzle.DizzleDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("a79e6efb-a0d5-436f-93a1-5d0e0296e39f")]
	public partial class BoundedContextHasViews : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// BoundedContextHasViews domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa79e6efb, 0xa0d5, 0x436f, 0x93, 0xa1, 0x5d, 0x0e, 0x02, 0x96, 0xe3, 0x9f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a BoundedContextHasViews link in the same Partition as the given BoundedContext
		/// </summary>
		/// <param name="source">BoundedContext to use as the source of the relationship.</param>
		/// <param name="target">View to use as the target of the relationship.</param>
		public BoundedContextHasViews(BoundedContext source, View target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(BoundedContextHasViews.BoundedContextDomainRoleId, source), new DslModeling::RoleAssignment(BoundedContextHasViews.ViewDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public BoundedContextHasViews(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public BoundedContextHasViews(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public BoundedContextHasViews(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public BoundedContextHasViews(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region BoundedContext domain role code
		
		/// <summary>
		/// BoundedContext domain role Id.
		/// </summary>
		public static readonly global::System.Guid BoundedContextDomainRoleId = new global::System.Guid(0x21dd7594, 0x2535, 0x45e1, 0xad, 0x45, 0x3b, 0xf1, 0x4d, 0xb2, 0xee, 0xa0);
		
		/// <summary>
		/// DomainRole BoundedContext
		/// Description for FourDeep.Dizzle.BoundedContextHasViews.BoundedContext
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.Dizzle.BoundedContextHasViews/BoundedContext.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.Dizzle.BoundedContextHasViews/BoundedContext.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Views", PropertyDisplayNameKey="FourDeep.Dizzle.BoundedContextHasViews/BoundedContext.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("21dd7594-2535-45e1-ad45-3bf14db2eea0")]
		public virtual BoundedContext BoundedContext
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (BoundedContext)DslModeling::DomainRoleInfo.GetRolePlayer(this, BoundedContextDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, BoundedContextDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access BoundedContext of a View
		/// <summary>
		/// Gets BoundedContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static BoundedContext GetBoundedContext(View element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ViewDomainRoleId) as BoundedContext;
		}
		
		/// <summary>
		/// Sets BoundedContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetBoundedContext(View element, BoundedContext newBoundedContext)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ViewDomainRoleId, newBoundedContext);
		}
		#endregion
		#region View domain role code
		
		/// <summary>
		/// View domain role Id.
		/// </summary>
		public static readonly global::System.Guid ViewDomainRoleId = new global::System.Guid(0x2ec72194, 0xc482, 0x474f, 0xb0, 0xe0, 0x58, 0x09, 0x61, 0xa0, 0xd2, 0x8c);
		
		/// <summary>
		/// DomainRole View
		/// Description for FourDeep.Dizzle.BoundedContextHasViews.View
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.Dizzle.BoundedContextHasViews/View.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.Dizzle.BoundedContextHasViews/View.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "BoundedContext", PropertyDisplayNameKey="FourDeep.Dizzle.BoundedContextHasViews/View.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("2ec72194-c482-474f-b0e0-580961a0d28c")]
		public virtual View View
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (View)DslModeling::DomainRoleInfo.GetRolePlayer(this, ViewDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ViewDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Views of a BoundedContext
		/// <summary>
		/// Gets a list of Views.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<View> GetViews(BoundedContext element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<View>, View>(element, BoundedContextDomainRoleId);
		}
		#endregion
		#region BoundedContext link accessor
		/// <summary>
		/// Get the list of BoundedContextHasViews links to a BoundedContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::FourDeep.Dizzle.BoundedContextHasViews> GetLinksToViews ( global::FourDeep.Dizzle.BoundedContext boundedContextInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.BoundedContextHasViews>(boundedContextInstance, global::FourDeep.Dizzle.BoundedContextHasViews.BoundedContextDomainRoleId);
		}
		#endregion
		#region View link accessor
		/// <summary>
		/// Get the BoundedContextHasViews link to a View.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::FourDeep.Dizzle.BoundedContextHasViews GetLinkToBoundedContext (global::FourDeep.Dizzle.View viewInstance)
		{
			global::System.Collections.Generic.IList<global::FourDeep.Dizzle.BoundedContextHasViews> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.BoundedContextHasViews>(viewInstance, global::FourDeep.Dizzle.BoundedContextHasViews.ViewDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of View not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region BoundedContextHasViews instance accessors
		
		/// <summary>
		/// Get any BoundedContextHasViews links between a given BoundedContext and a View.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::FourDeep.Dizzle.BoundedContextHasViews> GetLinks( global::FourDeep.Dizzle.BoundedContext source, global::FourDeep.Dizzle.View target )
		{
			global::System.Collections.Generic.List<global::FourDeep.Dizzle.BoundedContextHasViews> outLinks = new global::System.Collections.Generic.List<global::FourDeep.Dizzle.BoundedContextHasViews>();
			global::System.Collections.Generic.IList<global::FourDeep.Dizzle.BoundedContextHasViews> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.BoundedContextHasViews>(source, global::FourDeep.Dizzle.BoundedContextHasViews.BoundedContextDomainRoleId);
			foreach ( global::FourDeep.Dizzle.BoundedContextHasViews link in links )
			{
				if ( target.Equals(link.View) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one BoundedContextHasViews link between a given BoundedContextand a View.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::FourDeep.Dizzle.BoundedContextHasViews GetLink( global::FourDeep.Dizzle.BoundedContext source, global::FourDeep.Dizzle.View target )
		{
			global::System.Collections.Generic.IList<global::FourDeep.Dizzle.BoundedContextHasViews> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.BoundedContextHasViews>(source, global::FourDeep.Dizzle.BoundedContextHasViews.BoundedContextDomainRoleId);
			foreach ( global::FourDeep.Dizzle.BoundedContextHasViews link in links )
			{
				if ( target.Equals(link.View) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace FourDeep.Dizzle
{
	/// <summary>
	/// DomainRelationship BoundedContextHasDomainEvents
	/// Description for FourDeep.Dizzle.BoundedContextHasDomainEvents
	/// </summary>
	[DslDesign::DisplayNameResource("FourDeep.Dizzle.BoundedContextHasDomainEvents.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("FourDeep.Dizzle.BoundedContextHasDomainEvents.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::FourDeep.Dizzle.DizzleDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("f6765c6d-f87c-42c9-a62d-9edf167359a3")]
	public partial class BoundedContextHasDomainEvents : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// BoundedContextHasDomainEvents domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf6765c6d, 0xf87c, 0x42c9, 0xa6, 0x2d, 0x9e, 0xdf, 0x16, 0x73, 0x59, 0xa3);
	
				
		/// <summary>
		/// Constructor
		/// Creates a BoundedContextHasDomainEvents link in the same Partition as the given BoundedContext
		/// </summary>
		/// <param name="source">BoundedContext to use as the source of the relationship.</param>
		/// <param name="target">DomainEvent to use as the target of the relationship.</param>
		public BoundedContextHasDomainEvents(BoundedContext source, DomainEvent target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(BoundedContextHasDomainEvents.BoundedContextDomainRoleId, source), new DslModeling::RoleAssignment(BoundedContextHasDomainEvents.DomainEventDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public BoundedContextHasDomainEvents(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public BoundedContextHasDomainEvents(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public BoundedContextHasDomainEvents(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public BoundedContextHasDomainEvents(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region BoundedContext domain role code
		
		/// <summary>
		/// BoundedContext domain role Id.
		/// </summary>
		public static readonly global::System.Guid BoundedContextDomainRoleId = new global::System.Guid(0x7b412f39, 0xe45d, 0x40fa, 0x86, 0xec, 0x03, 0x05, 0xb7, 0x91, 0x26, 0x37);
		
		/// <summary>
		/// DomainRole BoundedContext
		/// Description for FourDeep.Dizzle.BoundedContextHasDomainEvents.BoundedContext
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.Dizzle.BoundedContextHasDomainEvents/BoundedContext.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.Dizzle.BoundedContextHasDomainEvents/BoundedContext.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DomainEvents", PropertyDisplayNameKey="FourDeep.Dizzle.BoundedContextHasDomainEvents/BoundedContext.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("7b412f39-e45d-40fa-86ec-0305b7912637")]
		public virtual BoundedContext BoundedContext
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (BoundedContext)DslModeling::DomainRoleInfo.GetRolePlayer(this, BoundedContextDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, BoundedContextDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access BoundedContext of a DomainEvent
		/// <summary>
		/// Gets BoundedContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static BoundedContext GetBoundedContext(DomainEvent element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DomainEventDomainRoleId) as BoundedContext;
		}
		
		/// <summary>
		/// Sets BoundedContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetBoundedContext(DomainEvent element, BoundedContext newBoundedContext)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DomainEventDomainRoleId, newBoundedContext);
		}
		#endregion
		#region DomainEvent domain role code
		
		/// <summary>
		/// DomainEvent domain role Id.
		/// </summary>
		public static readonly global::System.Guid DomainEventDomainRoleId = new global::System.Guid(0x254d0e56, 0x54cd, 0x42b9, 0x9a, 0xbc, 0x4d, 0x87, 0x4b, 0x59, 0x69, 0xaa);
		
		/// <summary>
		/// DomainRole DomainEvent
		/// Description for FourDeep.Dizzle.BoundedContextHasDomainEvents.DomainEvent
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.Dizzle.BoundedContextHasDomainEvents/DomainEvent.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.Dizzle.BoundedContextHasDomainEvents/DomainEvent.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "BoundedContext", PropertyDisplayNameKey="FourDeep.Dizzle.BoundedContextHasDomainEvents/DomainEvent.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("254d0e56-54cd-42b9-9abc-4d874b5969aa")]
		public virtual DomainEvent DomainEvent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DomainEvent)DslModeling::DomainRoleInfo.GetRolePlayer(this, DomainEventDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DomainEventDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DomainEvents of a BoundedContext
		/// <summary>
		/// Gets a list of DomainEvents.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DomainEvent> GetDomainEvents(BoundedContext element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<DomainEvent>, DomainEvent>(element, BoundedContextDomainRoleId);
		}
		#endregion
		#region BoundedContext link accessor
		/// <summary>
		/// Get the list of BoundedContextHasDomainEvents links to a BoundedContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::FourDeep.Dizzle.BoundedContextHasDomainEvents> GetLinksToDomainEvents ( global::FourDeep.Dizzle.BoundedContext boundedContextInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.BoundedContextHasDomainEvents>(boundedContextInstance, global::FourDeep.Dizzle.BoundedContextHasDomainEvents.BoundedContextDomainRoleId);
		}
		#endregion
		#region DomainEvent link accessor
		/// <summary>
		/// Get the BoundedContextHasDomainEvents link to a DomainEvent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::FourDeep.Dizzle.BoundedContextHasDomainEvents GetLinkToBoundedContext (global::FourDeep.Dizzle.DomainEvent domainEventInstance)
		{
			global::System.Collections.Generic.IList<global::FourDeep.Dizzle.BoundedContextHasDomainEvents> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.BoundedContextHasDomainEvents>(domainEventInstance, global::FourDeep.Dizzle.BoundedContextHasDomainEvents.DomainEventDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DomainEvent not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region BoundedContextHasDomainEvents instance accessors
		
		/// <summary>
		/// Get any BoundedContextHasDomainEvents links between a given BoundedContext and a DomainEvent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::FourDeep.Dizzle.BoundedContextHasDomainEvents> GetLinks( global::FourDeep.Dizzle.BoundedContext source, global::FourDeep.Dizzle.DomainEvent target )
		{
			global::System.Collections.Generic.List<global::FourDeep.Dizzle.BoundedContextHasDomainEvents> outLinks = new global::System.Collections.Generic.List<global::FourDeep.Dizzle.BoundedContextHasDomainEvents>();
			global::System.Collections.Generic.IList<global::FourDeep.Dizzle.BoundedContextHasDomainEvents> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.BoundedContextHasDomainEvents>(source, global::FourDeep.Dizzle.BoundedContextHasDomainEvents.BoundedContextDomainRoleId);
			foreach ( global::FourDeep.Dizzle.BoundedContextHasDomainEvents link in links )
			{
				if ( target.Equals(link.DomainEvent) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one BoundedContextHasDomainEvents link between a given BoundedContextand a DomainEvent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::FourDeep.Dizzle.BoundedContextHasDomainEvents GetLink( global::FourDeep.Dizzle.BoundedContext source, global::FourDeep.Dizzle.DomainEvent target )
		{
			global::System.Collections.Generic.IList<global::FourDeep.Dizzle.BoundedContextHasDomainEvents> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.BoundedContextHasDomainEvents>(source, global::FourDeep.Dizzle.BoundedContextHasDomainEvents.BoundedContextDomainRoleId);
			foreach ( global::FourDeep.Dizzle.BoundedContextHasDomainEvents link in links )
			{
				if ( target.Equals(link.DomainEvent) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace FourDeep.Dizzle
{
	/// <summary>
	/// DomainRelationship AggregateStateSubscribesToDomainEvents
	/// Description for FourDeep.Dizzle.AggregateStateSubscribesToDomainEvents
	/// </summary>
	[DslDesign::DisplayNameResource("FourDeep.Dizzle.AggregateStateSubscribesToDomainEvents.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("FourDeep.Dizzle.AggregateStateSubscribesToDomainEvents.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::FourDeep.Dizzle.DizzleDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("63a1587f-533d-4bb3-94eb-016bbcccde7b")]
	public partial class AggregateStateSubscribesToDomainEvents : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// AggregateStateSubscribesToDomainEvents domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x63a1587f, 0x533d, 0x4bb3, 0x94, 0xeb, 0x01, 0x6b, 0xbc, 0xcc, 0xde, 0x7b);
	
				
		/// <summary>
		/// Constructor
		/// Creates a AggregateStateSubscribesToDomainEvents link in the same Partition as the given AggregateState
		/// </summary>
		/// <param name="source">AggregateState to use as the source of the relationship.</param>
		/// <param name="target">DomainEvent to use as the target of the relationship.</param>
		public AggregateStateSubscribesToDomainEvents(AggregateState source, DomainEvent target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(AggregateStateSubscribesToDomainEvents.AggregateStateDomainRoleId, source), new DslModeling::RoleAssignment(AggregateStateSubscribesToDomainEvents.DomainEventDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AggregateStateSubscribesToDomainEvents(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AggregateStateSubscribesToDomainEvents(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AggregateStateSubscribesToDomainEvents(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AggregateStateSubscribesToDomainEvents(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region AggregateState domain role code
		
		/// <summary>
		/// AggregateState domain role Id.
		/// </summary>
		public static readonly global::System.Guid AggregateStateDomainRoleId = new global::System.Guid(0xecc16466, 0x08f0, 0x4dcd, 0xa7, 0x4e, 0xb4, 0xf5, 0x38, 0x7d, 0xb1, 0xe4);
		
		/// <summary>
		/// DomainRole AggregateState
		/// Description for
		/// FourDeep.Dizzle.AggregateStateSubscribesToDomainEvents.AggregateState
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.Dizzle.AggregateStateSubscribesToDomainEvents/AggregateState.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.Dizzle.AggregateStateSubscribesToDomainEvents/AggregateState.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DomainEvents", PropertyDisplayNameKey="FourDeep.Dizzle.AggregateStateSubscribesToDomainEvents/AggregateState.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("ecc16466-08f0-4dcd-a74e-b4f5387db1e4")]
		public virtual AggregateState AggregateState
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AggregateState)DslModeling::DomainRoleInfo.GetRolePlayer(this, AggregateStateDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AggregateStateDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AggregateStates of a DomainEvent
		/// <summary>
		/// Gets a list of AggregateStates.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<AggregateState> GetAggregateStates(DomainEvent element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<AggregateState>, AggregateState>(element, DomainEventDomainRoleId);
		}
		#endregion
		#region DomainEvent domain role code
		
		/// <summary>
		/// DomainEvent domain role Id.
		/// </summary>
		public static readonly global::System.Guid DomainEventDomainRoleId = new global::System.Guid(0xfbe50664, 0x7293, 0x4b95, 0xba, 0x09, 0x75, 0xa4, 0x57, 0x26, 0xbb, 0x6e);
		
		/// <summary>
		/// DomainRole DomainEvent
		/// Description for
		/// FourDeep.Dizzle.AggregateStateSubscribesToDomainEvents.DomainEvent
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.Dizzle.AggregateStateSubscribesToDomainEvents/DomainEvent.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.Dizzle.AggregateStateSubscribesToDomainEvents/DomainEvent.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "AggregateStates", PropertyDisplayNameKey="FourDeep.Dizzle.AggregateStateSubscribesToDomainEvents/DomainEvent.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("fbe50664-7293-4b95-ba09-75a45726bb6e")]
		public virtual DomainEvent DomainEvent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DomainEvent)DslModeling::DomainRoleInfo.GetRolePlayer(this, DomainEventDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DomainEventDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DomainEvents of a AggregateState
		/// <summary>
		/// Gets a list of DomainEvents.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DomainEvent> GetDomainEvents(AggregateState element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<DomainEvent>, DomainEvent>(element, AggregateStateDomainRoleId);
		}
		#endregion
		#region AggregateState link accessor
		/// <summary>
		/// Get the list of AggregateStateSubscribesToDomainEvents links to a AggregateState.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::FourDeep.Dizzle.AggregateStateSubscribesToDomainEvents> GetLinksToDomainEvents ( global::FourDeep.Dizzle.AggregateState aggregateStateInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.AggregateStateSubscribesToDomainEvents>(aggregateStateInstance, global::FourDeep.Dizzle.AggregateStateSubscribesToDomainEvents.AggregateStateDomainRoleId);
		}
		#endregion
		#region DomainEvent link accessor
		/// <summary>
		/// Get the list of AggregateStateSubscribesToDomainEvents links to a DomainEvent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::FourDeep.Dizzle.AggregateStateSubscribesToDomainEvents> GetLinksToAggregateStates ( global::FourDeep.Dizzle.DomainEvent domainEventInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.AggregateStateSubscribesToDomainEvents>(domainEventInstance, global::FourDeep.Dizzle.AggregateStateSubscribesToDomainEvents.DomainEventDomainRoleId);
		}
		#endregion
		#region AggregateStateSubscribesToDomainEvents instance accessors
		
		/// <summary>
		/// Get any AggregateStateSubscribesToDomainEvents links between a given AggregateState and a DomainEvent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::FourDeep.Dizzle.AggregateStateSubscribesToDomainEvents> GetLinks( global::FourDeep.Dizzle.AggregateState source, global::FourDeep.Dizzle.DomainEvent target )
		{
			global::System.Collections.Generic.List<global::FourDeep.Dizzle.AggregateStateSubscribesToDomainEvents> outLinks = new global::System.Collections.Generic.List<global::FourDeep.Dizzle.AggregateStateSubscribesToDomainEvents>();
			global::System.Collections.Generic.IList<global::FourDeep.Dizzle.AggregateStateSubscribesToDomainEvents> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.AggregateStateSubscribesToDomainEvents>(source, global::FourDeep.Dizzle.AggregateStateSubscribesToDomainEvents.AggregateStateDomainRoleId);
			foreach ( global::FourDeep.Dizzle.AggregateStateSubscribesToDomainEvents link in links )
			{
				if ( target.Equals(link.DomainEvent) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one AggregateStateSubscribesToDomainEvents link between a given AggregateStateand a DomainEvent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::FourDeep.Dizzle.AggregateStateSubscribesToDomainEvents GetLink( global::FourDeep.Dizzle.AggregateState source, global::FourDeep.Dizzle.DomainEvent target )
		{
			global::System.Collections.Generic.IList<global::FourDeep.Dizzle.AggregateStateSubscribesToDomainEvents> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.AggregateStateSubscribesToDomainEvents>(source, global::FourDeep.Dizzle.AggregateStateSubscribesToDomainEvents.AggregateStateDomainRoleId);
			foreach ( global::FourDeep.Dizzle.AggregateStateSubscribesToDomainEvents link in links )
			{
				if ( target.Equals(link.DomainEvent) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace FourDeep.Dizzle
{
	/// <summary>
	/// DomainRelationship AggregateStateHasProperties
	/// Description for FourDeep.Dizzle.AggregateStateHasProperties
	/// </summary>
	[DslDesign::DisplayNameResource("FourDeep.Dizzle.AggregateStateHasProperties.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("FourDeep.Dizzle.AggregateStateHasProperties.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::FourDeep.Dizzle.DizzleDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("892c8d12-a2ff-4faa-bc4d-900865fc136d")]
	public partial class AggregateStateHasProperties : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// AggregateStateHasProperties domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x892c8d12, 0xa2ff, 0x4faa, 0xbc, 0x4d, 0x90, 0x08, 0x65, 0xfc, 0x13, 0x6d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a AggregateStateHasProperties link in the same Partition as the given AggregateState
		/// </summary>
		/// <param name="source">AggregateState to use as the source of the relationship.</param>
		/// <param name="target">Property to use as the target of the relationship.</param>
		public AggregateStateHasProperties(AggregateState source, Property target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(AggregateStateHasProperties.AggregateStateDomainRoleId, source), new DslModeling::RoleAssignment(AggregateStateHasProperties.PropertyDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AggregateStateHasProperties(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AggregateStateHasProperties(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AggregateStateHasProperties(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AggregateStateHasProperties(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region AggregateState domain role code
		
		/// <summary>
		/// AggregateState domain role Id.
		/// </summary>
		public static readonly global::System.Guid AggregateStateDomainRoleId = new global::System.Guid(0x59863534, 0xd3ef, 0x4ae0, 0x9b, 0x57, 0x6e, 0x26, 0xd7, 0x3f, 0x74, 0x94);
		
		/// <summary>
		/// DomainRole AggregateState
		/// Description for FourDeep.Dizzle.AggregateStateHasProperties.AggregateState
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.Dizzle.AggregateStateHasProperties/AggregateState.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.Dizzle.AggregateStateHasProperties/AggregateState.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Properties", PropertyDisplayNameKey="FourDeep.Dizzle.AggregateStateHasProperties/AggregateState.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("59863534-d3ef-4ae0-9b57-6e26d73f7494")]
		public virtual AggregateState AggregateState
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AggregateState)DslModeling::DomainRoleInfo.GetRolePlayer(this, AggregateStateDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AggregateStateDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AggregateState of a Property
		/// <summary>
		/// Gets AggregateState.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static AggregateState GetAggregateState(Property element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PropertyDomainRoleId) as AggregateState;
		}
		
		/// <summary>
		/// Sets AggregateState.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAggregateState(Property element, AggregateState newAggregateState)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PropertyDomainRoleId, newAggregateState);
		}
		#endregion
		#region Property domain role code
		
		/// <summary>
		/// Property domain role Id.
		/// </summary>
		public static readonly global::System.Guid PropertyDomainRoleId = new global::System.Guid(0xdcbd114e, 0xb756, 0x44d5, 0xa8, 0x40, 0x84, 0x06, 0x1c, 0x05, 0x2f, 0x2f);
		
		/// <summary>
		/// DomainRole Property
		/// Description for FourDeep.Dizzle.AggregateStateHasProperties.Property
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.Dizzle.AggregateStateHasProperties/Property.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.Dizzle.AggregateStateHasProperties/Property.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "AggregateState", PropertyDisplayNameKey="FourDeep.Dizzle.AggregateStateHasProperties/Property.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("dcbd114e-b756-44d5-a840-84061c052f2f")]
		public virtual Property Property
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Property)DslModeling::DomainRoleInfo.GetRolePlayer(this, PropertyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PropertyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Properties of a AggregateState
		/// <summary>
		/// Gets a list of Properties.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Property> GetProperties(AggregateState element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Property>, Property>(element, AggregateStateDomainRoleId);
		}
		#endregion
		#region AggregateState link accessor
		/// <summary>
		/// Get the list of AggregateStateHasProperties links to a AggregateState.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::FourDeep.Dizzle.AggregateStateHasProperties> GetLinksToProperties ( global::FourDeep.Dizzle.AggregateState aggregateStateInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.AggregateStateHasProperties>(aggregateStateInstance, global::FourDeep.Dizzle.AggregateStateHasProperties.AggregateStateDomainRoleId);
		}
		#endregion
		#region Property link accessor
		/// <summary>
		/// Get the AggregateStateHasProperties link to a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::FourDeep.Dizzle.AggregateStateHasProperties GetLinkToAggregateState (global::FourDeep.Dizzle.Property propertyInstance)
		{
			global::System.Collections.Generic.IList<global::FourDeep.Dizzle.AggregateStateHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.AggregateStateHasProperties>(propertyInstance, global::FourDeep.Dizzle.AggregateStateHasProperties.PropertyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Property not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AggregateStateHasProperties instance accessors
		
		/// <summary>
		/// Get any AggregateStateHasProperties links between a given AggregateState and a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::FourDeep.Dizzle.AggregateStateHasProperties> GetLinks( global::FourDeep.Dizzle.AggregateState source, global::FourDeep.Dizzle.Property target )
		{
			global::System.Collections.Generic.List<global::FourDeep.Dizzle.AggregateStateHasProperties> outLinks = new global::System.Collections.Generic.List<global::FourDeep.Dizzle.AggregateStateHasProperties>();
			global::System.Collections.Generic.IList<global::FourDeep.Dizzle.AggregateStateHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.AggregateStateHasProperties>(source, global::FourDeep.Dizzle.AggregateStateHasProperties.AggregateStateDomainRoleId);
			foreach ( global::FourDeep.Dizzle.AggregateStateHasProperties link in links )
			{
				if ( target.Equals(link.Property) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one AggregateStateHasProperties link between a given AggregateStateand a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::FourDeep.Dizzle.AggregateStateHasProperties GetLink( global::FourDeep.Dizzle.AggregateState source, global::FourDeep.Dizzle.Property target )
		{
			global::System.Collections.Generic.IList<global::FourDeep.Dizzle.AggregateStateHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.AggregateStateHasProperties>(source, global::FourDeep.Dizzle.AggregateStateHasProperties.AggregateStateDomainRoleId);
			foreach ( global::FourDeep.Dizzle.AggregateStateHasProperties link in links )
			{
				if ( target.Equals(link.Property) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace FourDeep.Dizzle
{
	/// <summary>
	/// DomainRelationship DomainCommandHasProperties
	/// Description for FourDeep.Dizzle.DomainCommandHasProperties
	/// </summary>
	[DslDesign::DisplayNameResource("FourDeep.Dizzle.DomainCommandHasProperties.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("FourDeep.Dizzle.DomainCommandHasProperties.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::FourDeep.Dizzle.DizzleDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("c4731d26-6c67-4aed-804f-8ad9c55dadc4")]
	public partial class DomainCommandHasProperties : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DomainCommandHasProperties domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc4731d26, 0x6c67, 0x4aed, 0x80, 0x4f, 0x8a, 0xd9, 0xc5, 0x5d, 0xad, 0xc4);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DomainCommandHasProperties link in the same Partition as the given DomainCommand
		/// </summary>
		/// <param name="source">DomainCommand to use as the source of the relationship.</param>
		/// <param name="target">Property to use as the target of the relationship.</param>
		public DomainCommandHasProperties(DomainCommand source, Property target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DomainCommandHasProperties.DomainCommandDomainRoleId, source), new DslModeling::RoleAssignment(DomainCommandHasProperties.PropertyDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DomainCommandHasProperties(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DomainCommandHasProperties(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DomainCommandHasProperties(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DomainCommandHasProperties(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region DomainCommand domain role code
		
		/// <summary>
		/// DomainCommand domain role Id.
		/// </summary>
		public static readonly global::System.Guid DomainCommandDomainRoleId = new global::System.Guid(0x28a78bc3, 0x1285, 0x42a4, 0x9c, 0x7e, 0xc0, 0x4f, 0x44, 0x52, 0x69, 0xcd);
		
		/// <summary>
		/// DomainRole DomainCommand
		/// Description for FourDeep.Dizzle.DomainCommandHasProperties.DomainCommand
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.Dizzle.DomainCommandHasProperties/DomainCommand.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.Dizzle.DomainCommandHasProperties/DomainCommand.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Properties", PropertyDisplayNameKey="FourDeep.Dizzle.DomainCommandHasProperties/DomainCommand.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("28a78bc3-1285-42a4-9c7e-c04f445269cd")]
		public virtual DomainCommand DomainCommand
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DomainCommand)DslModeling::DomainRoleInfo.GetRolePlayer(this, DomainCommandDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DomainCommandDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DomainCommand of a Property
		/// <summary>
		/// Gets DomainCommand.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DomainCommand GetDomainCommand(Property element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PropertyDomainRoleId) as DomainCommand;
		}
		
		/// <summary>
		/// Sets DomainCommand.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDomainCommand(Property element, DomainCommand newDomainCommand)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PropertyDomainRoleId, newDomainCommand);
		}
		#endregion
		#region Property domain role code
		
		/// <summary>
		/// Property domain role Id.
		/// </summary>
		public static readonly global::System.Guid PropertyDomainRoleId = new global::System.Guid(0x1c3cbccd, 0x5170, 0x4657, 0x87, 0xb2, 0x25, 0x7f, 0x7b, 0x34, 0x3e, 0xe4);
		
		/// <summary>
		/// DomainRole Property
		/// Description for FourDeep.Dizzle.DomainCommandHasProperties.Property
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.Dizzle.DomainCommandHasProperties/Property.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.Dizzle.DomainCommandHasProperties/Property.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "DomainCommand", PropertyDisplayNameKey="FourDeep.Dizzle.DomainCommandHasProperties/Property.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("1c3cbccd-5170-4657-87b2-257f7b343ee4")]
		public virtual Property Property
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Property)DslModeling::DomainRoleInfo.GetRolePlayer(this, PropertyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PropertyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Properties of a DomainCommand
		/// <summary>
		/// Gets a list of Properties.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Property> GetProperties(DomainCommand element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Property>, Property>(element, DomainCommandDomainRoleId);
		}
		#endregion
		#region DomainCommand link accessor
		/// <summary>
		/// Get the list of DomainCommandHasProperties links to a DomainCommand.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::FourDeep.Dizzle.DomainCommandHasProperties> GetLinksToProperties ( global::FourDeep.Dizzle.DomainCommand domainCommandInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.DomainCommandHasProperties>(domainCommandInstance, global::FourDeep.Dizzle.DomainCommandHasProperties.DomainCommandDomainRoleId);
		}
		#endregion
		#region Property link accessor
		/// <summary>
		/// Get the DomainCommandHasProperties link to a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::FourDeep.Dizzle.DomainCommandHasProperties GetLinkToDomainCommand (global::FourDeep.Dizzle.Property propertyInstance)
		{
			global::System.Collections.Generic.IList<global::FourDeep.Dizzle.DomainCommandHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.DomainCommandHasProperties>(propertyInstance, global::FourDeep.Dizzle.DomainCommandHasProperties.PropertyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Property not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DomainCommandHasProperties instance accessors
		
		/// <summary>
		/// Get any DomainCommandHasProperties links between a given DomainCommand and a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::FourDeep.Dizzle.DomainCommandHasProperties> GetLinks( global::FourDeep.Dizzle.DomainCommand source, global::FourDeep.Dizzle.Property target )
		{
			global::System.Collections.Generic.List<global::FourDeep.Dizzle.DomainCommandHasProperties> outLinks = new global::System.Collections.Generic.List<global::FourDeep.Dizzle.DomainCommandHasProperties>();
			global::System.Collections.Generic.IList<global::FourDeep.Dizzle.DomainCommandHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.DomainCommandHasProperties>(source, global::FourDeep.Dizzle.DomainCommandHasProperties.DomainCommandDomainRoleId);
			foreach ( global::FourDeep.Dizzle.DomainCommandHasProperties link in links )
			{
				if ( target.Equals(link.Property) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DomainCommandHasProperties link between a given DomainCommandand a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::FourDeep.Dizzle.DomainCommandHasProperties GetLink( global::FourDeep.Dizzle.DomainCommand source, global::FourDeep.Dizzle.Property target )
		{
			global::System.Collections.Generic.IList<global::FourDeep.Dizzle.DomainCommandHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.DomainCommandHasProperties>(source, global::FourDeep.Dizzle.DomainCommandHasProperties.DomainCommandDomainRoleId);
			foreach ( global::FourDeep.Dizzle.DomainCommandHasProperties link in links )
			{
				if ( target.Equals(link.Property) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace FourDeep.Dizzle
{
	/// <summary>
	/// DomainRelationship DomainEventHasProperties
	/// Description for FourDeep.Dizzle.DomainEventHasProperties
	/// </summary>
	[DslDesign::DisplayNameResource("FourDeep.Dizzle.DomainEventHasProperties.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("FourDeep.Dizzle.DomainEventHasProperties.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::FourDeep.Dizzle.DizzleDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("d44bf87d-675d-456b-bbad-8e5162b7bbe6")]
	public partial class DomainEventHasProperties : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DomainEventHasProperties domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd44bf87d, 0x675d, 0x456b, 0xbb, 0xad, 0x8e, 0x51, 0x62, 0xb7, 0xbb, 0xe6);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DomainEventHasProperties link in the same Partition as the given DomainEvent
		/// </summary>
		/// <param name="source">DomainEvent to use as the source of the relationship.</param>
		/// <param name="target">Property to use as the target of the relationship.</param>
		public DomainEventHasProperties(DomainEvent source, Property target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DomainEventHasProperties.DomainEventDomainRoleId, source), new DslModeling::RoleAssignment(DomainEventHasProperties.PropertyDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DomainEventHasProperties(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DomainEventHasProperties(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DomainEventHasProperties(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DomainEventHasProperties(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region DomainEvent domain role code
		
		/// <summary>
		/// DomainEvent domain role Id.
		/// </summary>
		public static readonly global::System.Guid DomainEventDomainRoleId = new global::System.Guid(0x9d1e3c0d, 0x4a32, 0x4dfe, 0x9d, 0x21, 0xa3, 0x6e, 0xa4, 0x6f, 0xe2, 0x2f);
		
		/// <summary>
		/// DomainRole DomainEvent
		/// Description for FourDeep.Dizzle.DomainEventHasProperties.DomainEvent
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.Dizzle.DomainEventHasProperties/DomainEvent.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.Dizzle.DomainEventHasProperties/DomainEvent.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Properties", PropertyDisplayNameKey="FourDeep.Dizzle.DomainEventHasProperties/DomainEvent.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("9d1e3c0d-4a32-4dfe-9d21-a36ea46fe22f")]
		public virtual DomainEvent DomainEvent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DomainEvent)DslModeling::DomainRoleInfo.GetRolePlayer(this, DomainEventDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DomainEventDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DomainEvent of a Property
		/// <summary>
		/// Gets DomainEvent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DomainEvent GetDomainEvent(Property element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PropertyDomainRoleId) as DomainEvent;
		}
		
		/// <summary>
		/// Sets DomainEvent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDomainEvent(Property element, DomainEvent newDomainEvent)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PropertyDomainRoleId, newDomainEvent);
		}
		#endregion
		#region Property domain role code
		
		/// <summary>
		/// Property domain role Id.
		/// </summary>
		public static readonly global::System.Guid PropertyDomainRoleId = new global::System.Guid(0xf08e34b9, 0xa61b, 0x4a02, 0xae, 0x92, 0xf0, 0x4a, 0x1e, 0xe4, 0x5f, 0x4b);
		
		/// <summary>
		/// DomainRole Property
		/// Description for FourDeep.Dizzle.DomainEventHasProperties.Property
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.Dizzle.DomainEventHasProperties/Property.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.Dizzle.DomainEventHasProperties/Property.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "DomainEvent", PropertyDisplayNameKey="FourDeep.Dizzle.DomainEventHasProperties/Property.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("f08e34b9-a61b-4a02-ae92-f04a1ee45f4b")]
		public virtual Property Property
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Property)DslModeling::DomainRoleInfo.GetRolePlayer(this, PropertyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PropertyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Properties of a DomainEvent
		/// <summary>
		/// Gets a list of Properties.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Property> GetProperties(DomainEvent element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Property>, Property>(element, DomainEventDomainRoleId);
		}
		#endregion
		#region DomainEvent link accessor
		/// <summary>
		/// Get the list of DomainEventHasProperties links to a DomainEvent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::FourDeep.Dizzle.DomainEventHasProperties> GetLinksToProperties ( global::FourDeep.Dizzle.DomainEvent domainEventInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.DomainEventHasProperties>(domainEventInstance, global::FourDeep.Dizzle.DomainEventHasProperties.DomainEventDomainRoleId);
		}
		#endregion
		#region Property link accessor
		/// <summary>
		/// Get the DomainEventHasProperties link to a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::FourDeep.Dizzle.DomainEventHasProperties GetLinkToDomainEvent (global::FourDeep.Dizzle.Property propertyInstance)
		{
			global::System.Collections.Generic.IList<global::FourDeep.Dizzle.DomainEventHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.DomainEventHasProperties>(propertyInstance, global::FourDeep.Dizzle.DomainEventHasProperties.PropertyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Property not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DomainEventHasProperties instance accessors
		
		/// <summary>
		/// Get any DomainEventHasProperties links between a given DomainEvent and a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::FourDeep.Dizzle.DomainEventHasProperties> GetLinks( global::FourDeep.Dizzle.DomainEvent source, global::FourDeep.Dizzle.Property target )
		{
			global::System.Collections.Generic.List<global::FourDeep.Dizzle.DomainEventHasProperties> outLinks = new global::System.Collections.Generic.List<global::FourDeep.Dizzle.DomainEventHasProperties>();
			global::System.Collections.Generic.IList<global::FourDeep.Dizzle.DomainEventHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.DomainEventHasProperties>(source, global::FourDeep.Dizzle.DomainEventHasProperties.DomainEventDomainRoleId);
			foreach ( global::FourDeep.Dizzle.DomainEventHasProperties link in links )
			{
				if ( target.Equals(link.Property) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DomainEventHasProperties link between a given DomainEventand a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::FourDeep.Dizzle.DomainEventHasProperties GetLink( global::FourDeep.Dizzle.DomainEvent source, global::FourDeep.Dizzle.Property target )
		{
			global::System.Collections.Generic.IList<global::FourDeep.Dizzle.DomainEventHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.DomainEventHasProperties>(source, global::FourDeep.Dizzle.DomainEventHasProperties.DomainEventDomainRoleId);
			foreach ( global::FourDeep.Dizzle.DomainEventHasProperties link in links )
			{
				if ( target.Equals(link.Property) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace FourDeep.Dizzle
{
	/// <summary>
	/// DomainRelationship EntityHasProperties
	/// Description for FourDeep.Dizzle.EntityHasProperties
	/// </summary>
	[DslDesign::DisplayNameResource("FourDeep.Dizzle.EntityHasProperties.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("FourDeep.Dizzle.EntityHasProperties.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::FourDeep.Dizzle.DizzleDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("f8b9cbbc-fa83-4ea1-a351-4e6f81ebbfd2")]
	public partial class EntityHasProperties : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityHasProperties domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf8b9cbbc, 0xfa83, 0x4ea1, 0xa3, 0x51, 0x4e, 0x6f, 0x81, 0xeb, 0xbf, 0xd2);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EntityHasProperties link in the same Partition as the given Entity
		/// </summary>
		/// <param name="source">Entity to use as the source of the relationship.</param>
		/// <param name="target">Property to use as the target of the relationship.</param>
		public EntityHasProperties(Entity source, Property target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityHasProperties.EntityDomainRoleId, source), new DslModeling::RoleAssignment(EntityHasProperties.PropertyDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityHasProperties(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityHasProperties(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityHasProperties(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityHasProperties(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Entity domain role code
		
		/// <summary>
		/// Entity domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntityDomainRoleId = new global::System.Guid(0xdd8d8bce, 0x080f, 0x41c4, 0x91, 0xbe, 0xb1, 0x5d, 0x16, 0xba, 0xd8, 0x90);
		
		/// <summary>
		/// DomainRole Entity
		/// Description for FourDeep.Dizzle.EntityHasProperties.Entity
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.Dizzle.EntityHasProperties/Entity.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.Dizzle.EntityHasProperties/Entity.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Properties", PropertyDisplayNameKey="FourDeep.Dizzle.EntityHasProperties/Entity.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("dd8d8bce-080f-41c4-91be-b15d16bad890")]
		public virtual Entity Entity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Entity)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Entity of a Property
		/// <summary>
		/// Gets Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Entity GetEntity(Property element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PropertyDomainRoleId) as Entity;
		}
		
		/// <summary>
		/// Sets Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEntity(Property element, Entity newEntity)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PropertyDomainRoleId, newEntity);
		}
		#endregion
		#region Property domain role code
		
		/// <summary>
		/// Property domain role Id.
		/// </summary>
		public static readonly global::System.Guid PropertyDomainRoleId = new global::System.Guid(0x91bf227c, 0x0301, 0x40ee, 0xa1, 0x29, 0x75, 0x86, 0xe0, 0xea, 0xc2, 0x36);
		
		/// <summary>
		/// DomainRole Property
		/// Description for FourDeep.Dizzle.EntityHasProperties.Property
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.Dizzle.EntityHasProperties/Property.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.Dizzle.EntityHasProperties/Property.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Entity", PropertyDisplayNameKey="FourDeep.Dizzle.EntityHasProperties/Property.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("91bf227c-0301-40ee-a129-7586e0eac236")]
		public virtual Property Property
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Property)DslModeling::DomainRoleInfo.GetRolePlayer(this, PropertyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PropertyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Properties of a Entity
		/// <summary>
		/// Gets a list of Properties.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Property> GetProperties(Entity element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Property>, Property>(element, EntityDomainRoleId);
		}
		#endregion
		#region Entity link accessor
		/// <summary>
		/// Get the list of EntityHasProperties links to a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::FourDeep.Dizzle.EntityHasProperties> GetLinksToProperties ( global::FourDeep.Dizzle.Entity entityInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.EntityHasProperties>(entityInstance, global::FourDeep.Dizzle.EntityHasProperties.EntityDomainRoleId);
		}
		#endregion
		#region Property link accessor
		/// <summary>
		/// Get the EntityHasProperties link to a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::FourDeep.Dizzle.EntityHasProperties GetLinkToEntity (global::FourDeep.Dizzle.Property propertyInstance)
		{
			global::System.Collections.Generic.IList<global::FourDeep.Dizzle.EntityHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.EntityHasProperties>(propertyInstance, global::FourDeep.Dizzle.EntityHasProperties.PropertyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Property not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EntityHasProperties instance accessors
		
		/// <summary>
		/// Get any EntityHasProperties links between a given Entity and a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::FourDeep.Dizzle.EntityHasProperties> GetLinks( global::FourDeep.Dizzle.Entity source, global::FourDeep.Dizzle.Property target )
		{
			global::System.Collections.Generic.List<global::FourDeep.Dizzle.EntityHasProperties> outLinks = new global::System.Collections.Generic.List<global::FourDeep.Dizzle.EntityHasProperties>();
			global::System.Collections.Generic.IList<global::FourDeep.Dizzle.EntityHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.EntityHasProperties>(source, global::FourDeep.Dizzle.EntityHasProperties.EntityDomainRoleId);
			foreach ( global::FourDeep.Dizzle.EntityHasProperties link in links )
			{
				if ( target.Equals(link.Property) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EntityHasProperties link between a given Entityand a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::FourDeep.Dizzle.EntityHasProperties GetLink( global::FourDeep.Dizzle.Entity source, global::FourDeep.Dizzle.Property target )
		{
			global::System.Collections.Generic.IList<global::FourDeep.Dizzle.EntityHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.EntityHasProperties>(source, global::FourDeep.Dizzle.EntityHasProperties.EntityDomainRoleId);
			foreach ( global::FourDeep.Dizzle.EntityHasProperties link in links )
			{
				if ( target.Equals(link.Property) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace FourDeep.Dizzle
{
	/// <summary>
	/// DomainRelationship BoundedContextHasEntities
	/// Description for FourDeep.Dizzle.BoundedContextHasEntities
	/// </summary>
	[DslDesign::DisplayNameResource("FourDeep.Dizzle.BoundedContextHasEntities.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("FourDeep.Dizzle.BoundedContextHasEntities.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::FourDeep.Dizzle.DizzleDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("63dfc131-ae0a-4aee-9de8-3197a768f29c")]
	public partial class BoundedContextHasEntities : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// BoundedContextHasEntities domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x63dfc131, 0xae0a, 0x4aee, 0x9d, 0xe8, 0x31, 0x97, 0xa7, 0x68, 0xf2, 0x9c);
	
				
		/// <summary>
		/// Constructor
		/// Creates a BoundedContextHasEntities link in the same Partition as the given BoundedContext
		/// </summary>
		/// <param name="source">BoundedContext to use as the source of the relationship.</param>
		/// <param name="target">Entity to use as the target of the relationship.</param>
		public BoundedContextHasEntities(BoundedContext source, Entity target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(BoundedContextHasEntities.BoundedContextDomainRoleId, source), new DslModeling::RoleAssignment(BoundedContextHasEntities.EntityDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public BoundedContextHasEntities(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public BoundedContextHasEntities(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public BoundedContextHasEntities(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public BoundedContextHasEntities(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region BoundedContext domain role code
		
		/// <summary>
		/// BoundedContext domain role Id.
		/// </summary>
		public static readonly global::System.Guid BoundedContextDomainRoleId = new global::System.Guid(0x4723e7b8, 0x30b8, 0x4f13, 0x82, 0xdc, 0xc2, 0xaf, 0x80, 0xf9, 0x5d, 0x8e);
		
		/// <summary>
		/// DomainRole BoundedContext
		/// Description for FourDeep.Dizzle.BoundedContextHasEntities.BoundedContext
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.Dizzle.BoundedContextHasEntities/BoundedContext.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.Dizzle.BoundedContextHasEntities/BoundedContext.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Entities", PropertyDisplayNameKey="FourDeep.Dizzle.BoundedContextHasEntities/BoundedContext.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("4723e7b8-30b8-4f13-82dc-c2af80f95d8e")]
		public virtual BoundedContext BoundedContext
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (BoundedContext)DslModeling::DomainRoleInfo.GetRolePlayer(this, BoundedContextDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, BoundedContextDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access BoundedContext of a Entity
		/// <summary>
		/// Gets BoundedContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static BoundedContext GetBoundedContext(Entity element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, EntityDomainRoleId) as BoundedContext;
		}
		
		/// <summary>
		/// Sets BoundedContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetBoundedContext(Entity element, BoundedContext newBoundedContext)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, EntityDomainRoleId, newBoundedContext);
		}
		#endregion
		#region Entity domain role code
		
		/// <summary>
		/// Entity domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntityDomainRoleId = new global::System.Guid(0xfa0d9a94, 0x698d, 0x4f2a, 0x82, 0x7d, 0xd5, 0x89, 0x4a, 0x1f, 0x3d, 0x76);
		
		/// <summary>
		/// DomainRole Entity
		/// Description for FourDeep.Dizzle.BoundedContextHasEntities.Entity
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.Dizzle.BoundedContextHasEntities/Entity.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.Dizzle.BoundedContextHasEntities/Entity.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "BoundedContext", PropertyDisplayNameKey="FourDeep.Dizzle.BoundedContextHasEntities/Entity.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("fa0d9a94-698d-4f2a-827d-d5894a1f3d76")]
		public virtual Entity Entity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Entity)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Entities of a BoundedContext
		/// <summary>
		/// Gets a list of Entities.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Entity> GetEntities(BoundedContext element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Entity>, Entity>(element, BoundedContextDomainRoleId);
		}
		#endregion
		#region BoundedContext link accessor
		/// <summary>
		/// Get the list of BoundedContextHasEntities links to a BoundedContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::FourDeep.Dizzle.BoundedContextHasEntities> GetLinksToEntities ( global::FourDeep.Dizzle.BoundedContext boundedContextInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.BoundedContextHasEntities>(boundedContextInstance, global::FourDeep.Dizzle.BoundedContextHasEntities.BoundedContextDomainRoleId);
		}
		#endregion
		#region Entity link accessor
		/// <summary>
		/// Get the BoundedContextHasEntities link to a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::FourDeep.Dizzle.BoundedContextHasEntities GetLinkToBoundedContext (global::FourDeep.Dizzle.Entity entityInstance)
		{
			global::System.Collections.Generic.IList<global::FourDeep.Dizzle.BoundedContextHasEntities> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.BoundedContextHasEntities>(entityInstance, global::FourDeep.Dizzle.BoundedContextHasEntities.EntityDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Entity not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region BoundedContextHasEntities instance accessors
		
		/// <summary>
		/// Get any BoundedContextHasEntities links between a given BoundedContext and a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::FourDeep.Dizzle.BoundedContextHasEntities> GetLinks( global::FourDeep.Dizzle.BoundedContext source, global::FourDeep.Dizzle.Entity target )
		{
			global::System.Collections.Generic.List<global::FourDeep.Dizzle.BoundedContextHasEntities> outLinks = new global::System.Collections.Generic.List<global::FourDeep.Dizzle.BoundedContextHasEntities>();
			global::System.Collections.Generic.IList<global::FourDeep.Dizzle.BoundedContextHasEntities> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.BoundedContextHasEntities>(source, global::FourDeep.Dizzle.BoundedContextHasEntities.BoundedContextDomainRoleId);
			foreach ( global::FourDeep.Dizzle.BoundedContextHasEntities link in links )
			{
				if ( target.Equals(link.Entity) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one BoundedContextHasEntities link between a given BoundedContextand a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::FourDeep.Dizzle.BoundedContextHasEntities GetLink( global::FourDeep.Dizzle.BoundedContext source, global::FourDeep.Dizzle.Entity target )
		{
			global::System.Collections.Generic.IList<global::FourDeep.Dizzle.BoundedContextHasEntities> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.BoundedContextHasEntities>(source, global::FourDeep.Dizzle.BoundedContextHasEntities.BoundedContextDomainRoleId);
			foreach ( global::FourDeep.Dizzle.BoundedContextHasEntities link in links )
			{
				if ( target.Equals(link.Entity) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace FourDeep.Dizzle
{
	/// <summary>
	/// DomainRelationship ViewHasProperties
	/// Description for FourDeep.Dizzle.ViewHasProperties
	/// </summary>
	[DslDesign::DisplayNameResource("FourDeep.Dizzle.ViewHasProperties.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("FourDeep.Dizzle.ViewHasProperties.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::FourDeep.Dizzle.DizzleDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("c36e8e72-628b-44d2-a79b-3bb8517d60c5")]
	public partial class ViewHasProperties : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ViewHasProperties domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc36e8e72, 0x628b, 0x44d2, 0xa7, 0x9b, 0x3b, 0xb8, 0x51, 0x7d, 0x60, 0xc5);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ViewHasProperties link in the same Partition as the given View
		/// </summary>
		/// <param name="source">View to use as the source of the relationship.</param>
		/// <param name="target">Property to use as the target of the relationship.</param>
		public ViewHasProperties(View source, Property target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ViewHasProperties.ViewDomainRoleId, source), new DslModeling::RoleAssignment(ViewHasProperties.PropertyDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ViewHasProperties(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ViewHasProperties(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ViewHasProperties(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ViewHasProperties(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region View domain role code
		
		/// <summary>
		/// View domain role Id.
		/// </summary>
		public static readonly global::System.Guid ViewDomainRoleId = new global::System.Guid(0xe0315ff5, 0x4035, 0x4b5b, 0x9e, 0xcf, 0xad, 0xc1, 0x85, 0xcb, 0x3c, 0x24);
		
		/// <summary>
		/// DomainRole View
		/// Description for FourDeep.Dizzle.ViewHasProperties.View
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.Dizzle.ViewHasProperties/View.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.Dizzle.ViewHasProperties/View.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Properties", PropertyDisplayNameKey="FourDeep.Dizzle.ViewHasProperties/View.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("e0315ff5-4035-4b5b-9ecf-adc185cb3c24")]
		public virtual View View
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (View)DslModeling::DomainRoleInfo.GetRolePlayer(this, ViewDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ViewDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access View of a Property
		/// <summary>
		/// Gets View.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static View GetView(Property element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PropertyDomainRoleId) as View;
		}
		
		/// <summary>
		/// Sets View.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetView(Property element, View newView)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PropertyDomainRoleId, newView);
		}
		#endregion
		#region Property domain role code
		
		/// <summary>
		/// Property domain role Id.
		/// </summary>
		public static readonly global::System.Guid PropertyDomainRoleId = new global::System.Guid(0x0217b478, 0x2e34, 0x4784, 0x96, 0xf3, 0xe7, 0xfc, 0x30, 0x17, 0x84, 0x08);
		
		/// <summary>
		/// DomainRole Property
		/// Description for FourDeep.Dizzle.ViewHasProperties.Property
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.Dizzle.ViewHasProperties/Property.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.Dizzle.ViewHasProperties/Property.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "View", PropertyDisplayNameKey="FourDeep.Dizzle.ViewHasProperties/Property.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("0217b478-2e34-4784-96f3-e7fc30178408")]
		public virtual Property Property
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Property)DslModeling::DomainRoleInfo.GetRolePlayer(this, PropertyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PropertyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Properties of a View
		/// <summary>
		/// Gets a list of Properties.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Property> GetProperties(View element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Property>, Property>(element, ViewDomainRoleId);
		}
		#endregion
		#region View link accessor
		/// <summary>
		/// Get the list of ViewHasProperties links to a View.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::FourDeep.Dizzle.ViewHasProperties> GetLinksToProperties ( global::FourDeep.Dizzle.View viewInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.ViewHasProperties>(viewInstance, global::FourDeep.Dizzle.ViewHasProperties.ViewDomainRoleId);
		}
		#endregion
		#region Property link accessor
		/// <summary>
		/// Get the ViewHasProperties link to a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::FourDeep.Dizzle.ViewHasProperties GetLinkToView (global::FourDeep.Dizzle.Property propertyInstance)
		{
			global::System.Collections.Generic.IList<global::FourDeep.Dizzle.ViewHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.ViewHasProperties>(propertyInstance, global::FourDeep.Dizzle.ViewHasProperties.PropertyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Property not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ViewHasProperties instance accessors
		
		/// <summary>
		/// Get any ViewHasProperties links between a given View and a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::FourDeep.Dizzle.ViewHasProperties> GetLinks( global::FourDeep.Dizzle.View source, global::FourDeep.Dizzle.Property target )
		{
			global::System.Collections.Generic.List<global::FourDeep.Dizzle.ViewHasProperties> outLinks = new global::System.Collections.Generic.List<global::FourDeep.Dizzle.ViewHasProperties>();
			global::System.Collections.Generic.IList<global::FourDeep.Dizzle.ViewHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.ViewHasProperties>(source, global::FourDeep.Dizzle.ViewHasProperties.ViewDomainRoleId);
			foreach ( global::FourDeep.Dizzle.ViewHasProperties link in links )
			{
				if ( target.Equals(link.Property) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ViewHasProperties link between a given Viewand a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::FourDeep.Dizzle.ViewHasProperties GetLink( global::FourDeep.Dizzle.View source, global::FourDeep.Dizzle.Property target )
		{
			global::System.Collections.Generic.IList<global::FourDeep.Dizzle.ViewHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.ViewHasProperties>(source, global::FourDeep.Dizzle.ViewHasProperties.ViewDomainRoleId);
			foreach ( global::FourDeep.Dizzle.ViewHasProperties link in links )
			{
				if ( target.Equals(link.Property) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace FourDeep.Dizzle
{
	/// <summary>
	/// DomainRelationship ViewHasDomainEvents
	/// Description for FourDeep.Dizzle.ViewHasDomainEvents
	/// </summary>
	[DslDesign::DisplayNameResource("FourDeep.Dizzle.ViewHasDomainEvents.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("FourDeep.Dizzle.ViewHasDomainEvents.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::FourDeep.Dizzle.DizzleDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("c558513e-0cbc-48c3-a8fc-e40b1f44c61f")]
	public partial class ViewHasDomainEvents : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ViewHasDomainEvents domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc558513e, 0x0cbc, 0x48c3, 0xa8, 0xfc, 0xe4, 0x0b, 0x1f, 0x44, 0xc6, 0x1f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ViewHasDomainEvents link in the same Partition as the given View
		/// </summary>
		/// <param name="source">View to use as the source of the relationship.</param>
		/// <param name="target">DomainEvent to use as the target of the relationship.</param>
		public ViewHasDomainEvents(View source, DomainEvent target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ViewHasDomainEvents.ViewDomainRoleId, source), new DslModeling::RoleAssignment(ViewHasDomainEvents.DomainEventDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ViewHasDomainEvents(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ViewHasDomainEvents(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ViewHasDomainEvents(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ViewHasDomainEvents(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region View domain role code
		
		/// <summary>
		/// View domain role Id.
		/// </summary>
		public static readonly global::System.Guid ViewDomainRoleId = new global::System.Guid(0xda4be448, 0x32dc, 0x46bb, 0xb1, 0x24, 0xaf, 0x09, 0x14, 0x9b, 0x46, 0x48);
		
		/// <summary>
		/// DomainRole View
		/// Description for FourDeep.Dizzle.ViewHasDomainEvents.View
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.Dizzle.ViewHasDomainEvents/View.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.Dizzle.ViewHasDomainEvents/View.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DomainEvents", PropertyDisplayNameKey="FourDeep.Dizzle.ViewHasDomainEvents/View.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("da4be448-32dc-46bb-b124-af09149b4648")]
		public virtual View View
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (View)DslModeling::DomainRoleInfo.GetRolePlayer(this, ViewDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ViewDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access View of a DomainEvent
		/// <summary>
		/// Gets View.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static View GetView(DomainEvent element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DomainEventDomainRoleId) as View;
		}
		
		/// <summary>
		/// Sets View.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetView(DomainEvent element, View newView)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DomainEventDomainRoleId, newView);
		}
		#endregion
		#region DomainEvent domain role code
		
		/// <summary>
		/// DomainEvent domain role Id.
		/// </summary>
		public static readonly global::System.Guid DomainEventDomainRoleId = new global::System.Guid(0x6e74e517, 0xc4dc, 0x4087, 0x91, 0x59, 0x10, 0x45, 0x1d, 0x4a, 0xb5, 0xeb);
		
		/// <summary>
		/// DomainRole DomainEvent
		/// Description for FourDeep.Dizzle.ViewHasDomainEvents.DomainEvent
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.Dizzle.ViewHasDomainEvents/DomainEvent.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.Dizzle.ViewHasDomainEvents/DomainEvent.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "View", PropertyDisplayNameKey="FourDeep.Dizzle.ViewHasDomainEvents/DomainEvent.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("6e74e517-c4dc-4087-9159-10451d4ab5eb")]
		public virtual DomainEvent DomainEvent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DomainEvent)DslModeling::DomainRoleInfo.GetRolePlayer(this, DomainEventDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DomainEventDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DomainEvents of a View
		/// <summary>
		/// Gets a list of DomainEvents.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DomainEvent> GetDomainEvents(View element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<DomainEvent>, DomainEvent>(element, ViewDomainRoleId);
		}
		#endregion
		#region View link accessor
		/// <summary>
		/// Get the list of ViewHasDomainEvents links to a View.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::FourDeep.Dizzle.ViewHasDomainEvents> GetLinksToDomainEvents ( global::FourDeep.Dizzle.View viewInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.ViewHasDomainEvents>(viewInstance, global::FourDeep.Dizzle.ViewHasDomainEvents.ViewDomainRoleId);
		}
		#endregion
		#region DomainEvent link accessor
		/// <summary>
		/// Get the ViewHasDomainEvents link to a DomainEvent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::FourDeep.Dizzle.ViewHasDomainEvents GetLinkToView (global::FourDeep.Dizzle.DomainEvent domainEventInstance)
		{
			global::System.Collections.Generic.IList<global::FourDeep.Dizzle.ViewHasDomainEvents> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.ViewHasDomainEvents>(domainEventInstance, global::FourDeep.Dizzle.ViewHasDomainEvents.DomainEventDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DomainEvent not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ViewHasDomainEvents instance accessors
		
		/// <summary>
		/// Get any ViewHasDomainEvents links between a given View and a DomainEvent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::FourDeep.Dizzle.ViewHasDomainEvents> GetLinks( global::FourDeep.Dizzle.View source, global::FourDeep.Dizzle.DomainEvent target )
		{
			global::System.Collections.Generic.List<global::FourDeep.Dizzle.ViewHasDomainEvents> outLinks = new global::System.Collections.Generic.List<global::FourDeep.Dizzle.ViewHasDomainEvents>();
			global::System.Collections.Generic.IList<global::FourDeep.Dizzle.ViewHasDomainEvents> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.ViewHasDomainEvents>(source, global::FourDeep.Dizzle.ViewHasDomainEvents.ViewDomainRoleId);
			foreach ( global::FourDeep.Dizzle.ViewHasDomainEvents link in links )
			{
				if ( target.Equals(link.DomainEvent) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ViewHasDomainEvents link between a given Viewand a DomainEvent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::FourDeep.Dizzle.ViewHasDomainEvents GetLink( global::FourDeep.Dizzle.View source, global::FourDeep.Dizzle.DomainEvent target )
		{
			global::System.Collections.Generic.IList<global::FourDeep.Dizzle.ViewHasDomainEvents> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.Dizzle.ViewHasDomainEvents>(source, global::FourDeep.Dizzle.ViewHasDomainEvents.ViewDomainRoleId);
			foreach ( global::FourDeep.Dizzle.ViewHasDomainEvents link in links )
			{
				if ( target.Equals(link.DomainEvent) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
