//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace FourDeep.Dizzle
{
	/// <summary>
	/// DomainClass BoundedContext
	/// The root in which all other elements are embedded. Appears as a diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("FourDeep.Dizzle.BoundedContext.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("FourDeep.Dizzle.BoundedContext.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::FourDeep.Dizzle.DizzleDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("c890d7a7-d80d-4e1a-a15e-72dcb5fff13d")]
	public partial class BoundedContext : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// BoundedContext domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc890d7a7, 0xd80d, 0x4e1a, 0xa1, 0x5e, 0x72, 0xdc, 0xb5, 0xff, 0xf1, 0x3d);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public BoundedContext(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public BoundedContext(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ModelNamespace domain property code
		
		/// <summary>
		/// ModelNamespace domain property Id.
		/// </summary>
		public static readonly global::System.Guid ModelNamespaceDomainPropertyId = new global::System.Guid(0x366838d4, 0x37ff, 0x48e6, 0x85, 0xb3, 0x1b, 0x1b, 0xbe, 0x61, 0x35, 0xf4);
		
		/// <summary>
		/// Storage for ModelNamespace
		/// </summary>
		private global::System.String modelNamespacePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ModelNamespace domain property.
		/// Description for FourDeep.Dizzle.BoundedContext.Model Namespace
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.Dizzle.BoundedContext/ModelNamespace.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.Dizzle.BoundedContext/ModelNamespace.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("366838d4-37ff-48e6-85b3-1b1bbe6135f4")]
		public global::System.String ModelNamespace
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return modelNamespacePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ModelNamespacePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the BoundedContext.ModelNamespace domain property.
		/// </summary>
		internal sealed partial class ModelNamespacePropertyHandler : DslModeling::DomainPropertyValueHandler<BoundedContext, global::System.String>
		{
			private ModelNamespacePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the BoundedContext.ModelNamespace domain property value handler.
			/// </summary>
			public static readonly ModelNamespacePropertyHandler Instance = new ModelNamespacePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the BoundedContext.ModelNamespace domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ModelNamespaceDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(BoundedContext element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.modelNamespacePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(BoundedContext element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.modelNamespacePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Element opposite domain role accessor
		/// <summary>
		/// Gets or sets Element.
		/// </summary>
		public virtual AggregateRoot Element
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::FourDeep.Dizzle.BoundedContextHasAggregateRoot.BoundedContextDomainRoleId) as AggregateRoot;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::FourDeep.Dizzle.BoundedContextHasAggregateRoot.BoundedContextDomainRoleId, value);
			}
		}
		#endregion
		#region AggregateState opposite domain role accessor
		/// <summary>
		/// Gets or sets AggregateState.
		/// Description for
		/// FourDeep.Dizzle.BoundedContextReferencesAggregateState.BoundedContext
		/// </summary>
		public virtual AggregateState AggregateState
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::FourDeep.Dizzle.BoundedContextReferencesAggregateState.BoundedContextDomainRoleId) as AggregateState;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::FourDeep.Dizzle.BoundedContextReferencesAggregateState.BoundedContextDomainRoleId, value);
			}
		}
		#endregion
		#region DomainCommands opposite domain role accessor
		
		/// <summary>
		/// Gets a list of DomainCommands.
		/// Description for FourDeep.Dizzle.BoundedContextHasDomainCommands.BoundedContext
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<DomainCommand> DomainCommands
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<DomainCommand>, DomainCommand>(global::FourDeep.Dizzle.BoundedContextHasDomainCommands.BoundedContextDomainRoleId);
			}
		}
		#endregion
		#region Properties opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Properties.
		/// Description for FourDeep.Dizzle.BoundedContextHasProperties.BoundedContext
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Property> Properties
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Property>, Property>(global::FourDeep.Dizzle.BoundedContextHasProperties.BoundedContextDomainRoleId);
			}
		}
		#endregion
		#region Views opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Views.
		/// Description for FourDeep.Dizzle.BoundedContextHasViews.BoundedContext
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<View> Views
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<View>, View>(global::FourDeep.Dizzle.BoundedContextHasViews.BoundedContextDomainRoleId);
			}
		}
		#endregion
		#region DomainEvents opposite domain role accessor
		
		/// <summary>
		/// Gets a list of DomainEvents.
		/// Description for FourDeep.Dizzle.BoundedContextHasDomainEvents.BoundedContext
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<DomainEvent> DomainEvents
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<DomainEvent>, DomainEvent>(global::FourDeep.Dizzle.BoundedContextHasDomainEvents.BoundedContextDomainRoleId);
			}
		}
		#endregion
		#region Entities opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Entities.
		/// Description for FourDeep.Dizzle.BoundedContextHasEntities.BoundedContext
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Entity> Entities
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Entity>, Entity>(global::FourDeep.Dizzle.BoundedContextHasEntities.BoundedContextDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::FourDeep.Dizzle.View.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::FourDeep.Dizzle.DomainEvent.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::FourDeep.Dizzle.Entity.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::FourDeep.Dizzle.AggregateRoot.DomainClassId)) 
				{
					// Check that creating a link with this path doesn't cause multiplicity overflow: BoundedContextHasAggregateRoot.Element
					if (this.Element != null)
					{
						return false;
					}
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::FourDeep.Dizzle.DomainCommand.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::FourDeep.Dizzle.Property.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::FourDeep.Dizzle.View sourceView1 = sourceElement as global::FourDeep.Dizzle.View;
			if (sourceView1 != null)
			{
				// Create link for path BoundedContextHasViews.Views
				this.Views.Add(sourceView1);

				return;
			}
				
			global::FourDeep.Dizzle.DomainEvent sourceDomainEvent2 = sourceElement as global::FourDeep.Dizzle.DomainEvent;
			if (sourceDomainEvent2 != null)
			{
				// Create link for path BoundedContextHasDomainEvents.DomainEvents
				this.DomainEvents.Add(sourceDomainEvent2);

				return;
			}
				
			global::FourDeep.Dizzle.Entity sourceEntity3 = sourceElement as global::FourDeep.Dizzle.Entity;
			if (sourceEntity3 != null)
			{
				// Create link for path BoundedContextHasEntities.Entities
				this.Entities.Add(sourceEntity3);

				return;
			}
				
			global::FourDeep.Dizzle.AggregateRoot sourceAggregateRoot4 = sourceElement as global::FourDeep.Dizzle.AggregateRoot;
			if (sourceAggregateRoot4 != null)
			{
				// Create link for path BoundedContextHasAggregateRoot.Element
				this.Element = sourceAggregateRoot4;

				return;
			}
				
			global::FourDeep.Dizzle.DomainCommand sourceDomainCommand5 = sourceElement as global::FourDeep.Dizzle.DomainCommand;
			if (sourceDomainCommand5 != null)
			{
				// Create link for path BoundedContextHasDomainCommands.DomainCommands
				this.DomainCommands.Add(sourceDomainCommand5);

				return;
			}
				
			global::FourDeep.Dizzle.Property sourceProperty6 = sourceElement as global::FourDeep.Dizzle.Property;
			if (sourceProperty6 != null)
			{
				// Create link for path BoundedContextHasProperties.Properties
				this.Properties.Add(sourceProperty6);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::FourDeep.Dizzle.View sourceView1 = sourceElement as global::FourDeep.Dizzle.View;
			if (sourceView1 != null)
			{
				// Delete link for path BoundedContextHasViews.Views
				
				foreach (DslModeling::ElementLink link in global::FourDeep.Dizzle.BoundedContextHasViews.GetLinks((global::FourDeep.Dizzle.BoundedContext)this, sourceView1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::FourDeep.Dizzle.BoundedContextHasViews.BoundedContextDomainRoleId, global::FourDeep.Dizzle.BoundedContextHasViews.ViewDomainRoleId);
				}

				return;
			}
				
			global::FourDeep.Dizzle.DomainEvent sourceDomainEvent2 = sourceElement as global::FourDeep.Dizzle.DomainEvent;
			if (sourceDomainEvent2 != null)
			{
				// Delete link for path BoundedContextHasDomainEvents.DomainEvents
				
				foreach (DslModeling::ElementLink link in global::FourDeep.Dizzle.BoundedContextHasDomainEvents.GetLinks((global::FourDeep.Dizzle.BoundedContext)this, sourceDomainEvent2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::FourDeep.Dizzle.BoundedContextHasDomainEvents.BoundedContextDomainRoleId, global::FourDeep.Dizzle.BoundedContextHasDomainEvents.DomainEventDomainRoleId);
				}

				return;
			}
				
			global::FourDeep.Dizzle.Entity sourceEntity3 = sourceElement as global::FourDeep.Dizzle.Entity;
			if (sourceEntity3 != null)
			{
				// Delete link for path BoundedContextHasEntities.Entities
				
				foreach (DslModeling::ElementLink link in global::FourDeep.Dizzle.BoundedContextHasEntities.GetLinks((global::FourDeep.Dizzle.BoundedContext)this, sourceEntity3))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::FourDeep.Dizzle.BoundedContextHasEntities.BoundedContextDomainRoleId, global::FourDeep.Dizzle.BoundedContextHasEntities.EntityDomainRoleId);
				}

				return;
			}
				
			global::FourDeep.Dizzle.AggregateRoot sourceAggregateRoot4 = sourceElement as global::FourDeep.Dizzle.AggregateRoot;
			if (sourceAggregateRoot4 != null)
			{
				// Delete link for path BoundedContextHasAggregateRoot.Element
				
				foreach (DslModeling::ElementLink link in global::FourDeep.Dizzle.BoundedContextHasAggregateRoot.GetLinks((global::FourDeep.Dizzle.BoundedContext)this, sourceAggregateRoot4))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::FourDeep.Dizzle.BoundedContextHasAggregateRoot.BoundedContextDomainRoleId, global::FourDeep.Dizzle.BoundedContextHasAggregateRoot.ElementDomainRoleId);
				}

				return;
			}
				
			global::FourDeep.Dizzle.DomainCommand sourceDomainCommand5 = sourceElement as global::FourDeep.Dizzle.DomainCommand;
			if (sourceDomainCommand5 != null)
			{
				// Delete link for path BoundedContextHasDomainCommands.DomainCommands
				
				foreach (DslModeling::ElementLink link in global::FourDeep.Dizzle.BoundedContextHasDomainCommands.GetLinks((global::FourDeep.Dizzle.BoundedContext)this, sourceDomainCommand5))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::FourDeep.Dizzle.BoundedContextHasDomainCommands.BoundedContextDomainRoleId, global::FourDeep.Dizzle.BoundedContextHasDomainCommands.DomainCommandDomainRoleId);
				}

				return;
			}
				
			global::FourDeep.Dizzle.Property sourceProperty6 = sourceElement as global::FourDeep.Dizzle.Property;
			if (sourceProperty6 != null)
			{
				// Delete link for path BoundedContextHasProperties.Properties
				
				foreach (DslModeling::ElementLink link in global::FourDeep.Dizzle.BoundedContextHasProperties.GetLinks((global::FourDeep.Dizzle.BoundedContext)this, sourceProperty6))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::FourDeep.Dizzle.BoundedContextHasProperties.BoundedContextDomainRoleId, global::FourDeep.Dizzle.BoundedContextHasProperties.PropertyDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace FourDeep.Dizzle
{
	/// <summary>
	/// DomainClass AggregateRoot
	/// Elements embedded in the model. Appear as boxes on the diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("FourDeep.Dizzle.AggregateRoot.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("FourDeep.Dizzle.AggregateRoot.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::FourDeep.Dizzle.DizzleDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("682e09f5-f5ae-4aac-b704-7ab29dfc9007")]
	public partial class AggregateRoot : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// AggregateRoot domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x682e09f5, 0xf5ae, 0x4aac, 0xb7, 0x04, 0x7a, 0xb2, 0x9d, 0xfc, 0x90, 0x07);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public AggregateRoot(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public AggregateRoot(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x4fbff4e0, 0x57bb, 0x4d17, 0xa4, 0xf9, 0xde, 0x05, 0x9b, 0x9e, 0x60, 0xd7);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for FourDeep.Dizzle.AggregateRoot.Name
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.Dizzle.AggregateRoot/Name.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.Dizzle.AggregateRoot/Name.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("4fbff4e0-57bb-4d17-a4f9-de059b9e60d7")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the AggregateRoot.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<AggregateRoot, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the AggregateRoot.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the AggregateRoot.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(AggregateRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(AggregateRoot element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Description domain property code
		
		/// <summary>
		/// Description domain property Id.
		/// </summary>
		public static readonly global::System.Guid DescriptionDomainPropertyId = new global::System.Guid(0xfc29983f, 0xa6c0, 0x4e38, 0xad, 0x77, 0xca, 0xa2, 0xa5, 0x4a, 0xeb, 0x8d);
		
		/// <summary>
		/// Storage for Description
		/// </summary>
		private global::System.String descriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Description domain property.
		/// Description for FourDeep.Dizzle.AggregateRoot.Description
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.Dizzle.AggregateRoot/Description.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.Dizzle.AggregateRoot/Description.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("fc29983f-a6c0-4e38-ad77-caa2a54aeb8d")]
		public global::System.String Description
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return descriptionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DescriptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the AggregateRoot.Description domain property.
		/// </summary>
		internal sealed partial class DescriptionPropertyHandler : DslModeling::DomainPropertyValueHandler<AggregateRoot, global::System.String>
		{
			private DescriptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the AggregateRoot.Description domain property value handler.
			/// </summary>
			public static readonly DescriptionPropertyHandler Instance = new DescriptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the AggregateRoot.Description domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DescriptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(AggregateRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.descriptionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(AggregateRoot element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.descriptionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region BoundedContext opposite domain role accessor
		/// <summary>
		/// Gets or sets BoundedContext.
		/// </summary>
		public virtual BoundedContext BoundedContext
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::FourDeep.Dizzle.BoundedContextHasAggregateRoot.ElementDomainRoleId) as BoundedContext;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::FourDeep.Dizzle.BoundedContextHasAggregateRoot.ElementDomainRoleId, value);
			}
		}
		#endregion
		#region AggregateState opposite domain role accessor
		/// <summary>
		/// Gets or sets AggregateState.
		/// Description for FourDeep.Dizzle.AggregateRootHasAggregateState.AggregateRoot
		/// </summary>
		public virtual AggregateState AggregateState
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::FourDeep.Dizzle.AggregateRootHasAggregateState.AggregateRootDomainRoleId) as AggregateState;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::FourDeep.Dizzle.AggregateRootHasAggregateState.AggregateRootDomainRoleId, value);
			}
		}
		#endregion
		#region DomainCommands opposite domain role accessor
		
		/// <summary>
		/// Gets a list of DomainCommands.
		/// Description for FourDeep.Dizzle.AggregateRootHandlesDomainCommands.AggregateRoot
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<DomainCommand> DomainCommands
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<DomainCommand>, DomainCommand>(global::FourDeep.Dizzle.AggregateRootHandlesDomainCommands.AggregateRootDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::FourDeep.Dizzle.AggregateState.DomainClassId)) 
				{
					// Check that creating a link with this path doesn't cause multiplicity overflow: AggregateRootHasAggregateState.AggregateState
					if (this.AggregateState != null)
					{
						return false;
					}
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::FourDeep.Dizzle.AggregateState sourceAggregateState1 = sourceElement as global::FourDeep.Dizzle.AggregateState;
			if (sourceAggregateState1 != null)
			{
				// Create link for path AggregateRootHasAggregateState.AggregateState
				this.AggregateState = sourceAggregateState1;

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::FourDeep.Dizzle.AggregateState sourceAggregateState1 = sourceElement as global::FourDeep.Dizzle.AggregateState;
			if (sourceAggregateState1 != null)
			{
				// Delete link for path AggregateRootHasAggregateState.AggregateState
				
				foreach (DslModeling::ElementLink link in global::FourDeep.Dizzle.AggregateRootHasAggregateState.GetLinks((global::FourDeep.Dizzle.AggregateRoot)this, sourceAggregateState1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::FourDeep.Dizzle.AggregateRootHasAggregateState.AggregateRootDomainRoleId, global::FourDeep.Dizzle.AggregateRootHasAggregateState.AggregateStateDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace FourDeep.Dizzle
{
	/// <summary>
	/// DomainClass AggregateState
	/// Description for FourDeep.Dizzle.AggregateState
	/// </summary>
	[DslDesign::DisplayNameResource("FourDeep.Dizzle.AggregateState.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("FourDeep.Dizzle.AggregateState.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::FourDeep.Dizzle.DizzleDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("781ccc3a-4c09-454b-9708-25765c6bc834")]
	public partial class AggregateState : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// AggregateState domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x781ccc3a, 0x4c09, 0x454b, 0x97, 0x08, 0x25, 0x76, 0x5c, 0x6b, 0xc8, 0x34);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public AggregateState(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public AggregateState(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x9ebc8433, 0x8d48, 0x4d21, 0xa7, 0xbf, 0x11, 0xef, 0x23, 0x91, 0x57, 0xf6);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// The name of the State object for the Aggregate Root
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.Dizzle.AggregateState/Name.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.Dizzle.AggregateState/Name.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("9ebc8433-8d48-4d21-a7bf-11ef239157f6")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the AggregateState.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<AggregateState, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the AggregateState.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the AggregateState.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(AggregateState element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(AggregateState element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Description domain property code
		
		/// <summary>
		/// Description domain property Id.
		/// </summary>
		public static readonly global::System.Guid DescriptionDomainPropertyId = new global::System.Guid(0xc498d8a1, 0xfef8, 0x477e, 0xbc, 0xa0, 0x89, 0xe2, 0x5b, 0xa9, 0x83, 0xf9);
		
		/// <summary>
		/// Storage for Description
		/// </summary>
		private global::System.String descriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Description domain property.
		/// Description for FourDeep.Dizzle.AggregateState.Description
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.Dizzle.AggregateState/Description.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.Dizzle.AggregateState/Description.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("c498d8a1-fef8-477e-bca0-89e25ba983f9")]
		public global::System.String Description
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return descriptionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DescriptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the AggregateState.Description domain property.
		/// </summary>
		internal sealed partial class DescriptionPropertyHandler : DslModeling::DomainPropertyValueHandler<AggregateState, global::System.String>
		{
			private DescriptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the AggregateState.Description domain property value handler.
			/// </summary>
			public static readonly DescriptionPropertyHandler Instance = new DescriptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the AggregateState.Description domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DescriptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(AggregateState element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.descriptionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(AggregateState element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.descriptionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region AggregateRoot opposite domain role accessor
		/// <summary>
		/// Gets or sets AggregateRoot.
		/// Description for FourDeep.Dizzle.AggregateRootHasAggregateState.AggregateState
		/// </summary>
		public virtual AggregateRoot AggregateRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::FourDeep.Dizzle.AggregateRootHasAggregateState.AggregateStateDomainRoleId) as AggregateRoot;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::FourDeep.Dizzle.AggregateRootHasAggregateState.AggregateStateDomainRoleId, value);
			}
		}
		#endregion
		#region BoundedContext opposite domain role accessor
		/// <summary>
		/// Gets or sets BoundedContext.
		/// Description for
		/// FourDeep.Dizzle.BoundedContextReferencesAggregateState.AggregateState
		/// </summary>
		public virtual BoundedContext BoundedContext
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::FourDeep.Dizzle.BoundedContextReferencesAggregateState.AggregateStateDomainRoleId) as BoundedContext;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::FourDeep.Dizzle.BoundedContextReferencesAggregateState.AggregateStateDomainRoleId, value);
			}
		}
		#endregion
		#region DomainEvents opposite domain role accessor
		
		/// <summary>
		/// Gets a list of DomainEvents.
		/// Description for
		/// FourDeep.Dizzle.AggregateStateSubscribesToDomainEvents.AggregateState
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<DomainEvent> DomainEvents
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<DomainEvent>, DomainEvent>(global::FourDeep.Dizzle.AggregateStateSubscribesToDomainEvents.AggregateStateDomainRoleId);
			}
		}
		#endregion
		#region Properties opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Properties.
		/// Description for FourDeep.Dizzle.AggregateStateHasProperties.AggregateState
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Property> Properties
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Property>, Property>(global::FourDeep.Dizzle.AggregateStateHasProperties.AggregateStateDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::FourDeep.Dizzle.Property.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::FourDeep.Dizzle.Property sourceProperty1 = sourceElement as global::FourDeep.Dizzle.Property;
			if (sourceProperty1 != null)
			{
				// Create link for path AggregateStateHasProperties.Properties
				this.Properties.Add(sourceProperty1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::FourDeep.Dizzle.Property sourceProperty1 = sourceElement as global::FourDeep.Dizzle.Property;
			if (sourceProperty1 != null)
			{
				// Delete link for path AggregateStateHasProperties.Properties
				
				foreach (DslModeling::ElementLink link in global::FourDeep.Dizzle.AggregateStateHasProperties.GetLinks((global::FourDeep.Dizzle.AggregateState)this, sourceProperty1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::FourDeep.Dizzle.AggregateStateHasProperties.AggregateStateDomainRoleId, global::FourDeep.Dizzle.AggregateStateHasProperties.PropertyDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace FourDeep.Dizzle
{
	/// <summary>
	/// DomainClass DomainCommand
	/// Description for FourDeep.Dizzle.DomainCommand
	/// </summary>
	[DslDesign::DisplayNameResource("FourDeep.Dizzle.DomainCommand.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("FourDeep.Dizzle.DomainCommand.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::FourDeep.Dizzle.DizzleDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("a845c7e9-af86-4550-82f1-90013eccd64d")]
	public partial class DomainCommand : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// DomainCommand domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa845c7e9, 0xaf86, 0x4550, 0x82, 0xf1, 0x90, 0x01, 0x3e, 0xcc, 0xd6, 0x4d);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DomainCommand(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DomainCommand(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xae391281, 0xf73d, 0x4686, 0xad, 0x2e, 0xa0, 0x99, 0x9a, 0xb9, 0xf5, 0xa1);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for FourDeep.Dizzle.DomainCommand.Name
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.Dizzle.DomainCommand/Name.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.Dizzle.DomainCommand/Name.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("ae391281-f73d-4686-ad2e-a0999ab9f5a1")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DomainCommand.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<DomainCommand, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DomainCommand.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DomainCommand.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DomainCommand element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DomainCommand element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Description domain property code
		
		/// <summary>
		/// Description domain property Id.
		/// </summary>
		public static readonly global::System.Guid DescriptionDomainPropertyId = new global::System.Guid(0xbfc2bea1, 0x22f5, 0x4e2f, 0x87, 0x94, 0x5d, 0x2e, 0x75, 0x17, 0x8b, 0x1f);
		
		/// <summary>
		/// Storage for Description
		/// </summary>
		private global::System.String descriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Description domain property.
		/// Description for FourDeep.Dizzle.DomainCommand.Description
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.Dizzle.DomainCommand/Description.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.Dizzle.DomainCommand/Description.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("bfc2bea1-22f5-4e2f-8794-5d2e75178b1f")]
		public global::System.String Description
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return descriptionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DescriptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DomainCommand.Description domain property.
		/// </summary>
		internal sealed partial class DescriptionPropertyHandler : DslModeling::DomainPropertyValueHandler<DomainCommand, global::System.String>
		{
			private DescriptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DomainCommand.Description domain property value handler.
			/// </summary>
			public static readonly DescriptionPropertyHandler Instance = new DescriptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DomainCommand.Description domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DescriptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DomainCommand element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.descriptionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DomainCommand element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.descriptionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region RequiredPrivilege domain property code
		
		/// <summary>
		/// RequiredPrivilege domain property Id.
		/// </summary>
		public static readonly global::System.Guid RequiredPrivilegeDomainPropertyId = new global::System.Guid(0xec483037, 0x39ed, 0x4dfc, 0xab, 0x1f, 0x01, 0x56, 0x53, 0xf9, 0x20, 0x72);
		
		/// <summary>
		/// Storage for RequiredPrivilege
		/// </summary>
		private global::System.String requiredPrivilegePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of RequiredPrivilege domain property.
		/// Description for FourDeep.Dizzle.DomainCommand.Required Privilege
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.Dizzle.DomainCommand/RequiredPrivilege.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.Dizzle.DomainCommand/RequiredPrivilege.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("ec483037-39ed-4dfc-ab1f-015653f92072")]
		public global::System.String RequiredPrivilege
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return requiredPrivilegePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				RequiredPrivilegePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DomainCommand.RequiredPrivilege domain property.
		/// </summary>
		internal sealed partial class RequiredPrivilegePropertyHandler : DslModeling::DomainPropertyValueHandler<DomainCommand, global::System.String>
		{
			private RequiredPrivilegePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DomainCommand.RequiredPrivilege domain property value handler.
			/// </summary>
			public static readonly RequiredPrivilegePropertyHandler Instance = new RequiredPrivilegePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DomainCommand.RequiredPrivilege domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return RequiredPrivilegeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DomainCommand element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.requiredPrivilegePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DomainCommand element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.requiredPrivilegePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region AggregateRoot opposite domain role accessor
		/// <summary>
		/// Gets or sets AggregateRoot.
		/// Description for FourDeep.Dizzle.AggregateRootHandlesDomainCommands.DomainCommand
		/// </summary>
		public virtual AggregateRoot AggregateRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::FourDeep.Dizzle.AggregateRootHandlesDomainCommands.DomainCommandDomainRoleId) as AggregateRoot;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::FourDeep.Dizzle.AggregateRootHandlesDomainCommands.DomainCommandDomainRoleId, value);
			}
		}
		#endregion
		#region BoundedContext opposite domain role accessor
		/// <summary>
		/// Gets or sets BoundedContext.
		/// Description for FourDeep.Dizzle.BoundedContextHasDomainCommands.DomainCommand
		/// </summary>
		public virtual BoundedContext BoundedContext
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::FourDeep.Dizzle.BoundedContextHasDomainCommands.DomainCommandDomainRoleId) as BoundedContext;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::FourDeep.Dizzle.BoundedContextHasDomainCommands.DomainCommandDomainRoleId, value);
			}
		}
		#endregion
		#region Properties opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Properties.
		/// Description for FourDeep.Dizzle.DomainCommandHasProperties.DomainCommand
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Property> Properties
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Property>, Property>(global::FourDeep.Dizzle.DomainCommandHasProperties.DomainCommandDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::FourDeep.Dizzle.Property.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::FourDeep.Dizzle.Property sourceProperty1 = sourceElement as global::FourDeep.Dizzle.Property;
			if (sourceProperty1 != null)
			{
				// Create link for path DomainCommandHasProperties.Properties
				this.Properties.Add(sourceProperty1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::FourDeep.Dizzle.Property sourceProperty1 = sourceElement as global::FourDeep.Dizzle.Property;
			if (sourceProperty1 != null)
			{
				// Delete link for path DomainCommandHasProperties.Properties
				
				foreach (DslModeling::ElementLink link in global::FourDeep.Dizzle.DomainCommandHasProperties.GetLinks((global::FourDeep.Dizzle.DomainCommand)this, sourceProperty1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::FourDeep.Dizzle.DomainCommandHasProperties.DomainCommandDomainRoleId, global::FourDeep.Dizzle.DomainCommandHasProperties.PropertyDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace FourDeep.Dizzle
{
	/// <summary>
	/// DomainClass Property
	/// Description for FourDeep.Dizzle.Property
	/// </summary>
	[DslDesign::DisplayNameResource("FourDeep.Dizzle.Property.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("FourDeep.Dizzle.Property.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::FourDeep.Dizzle.DizzleDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("8b73d986-e441-4e0c-a1af-8bd2c1bf30e3")]
	public partial class Property : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Property domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8b73d986, 0xe441, 0x4e0c, 0xa1, 0xaf, 0x8b, 0xd2, 0xc1, 0xbf, 0x30, 0xe3);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Property(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Property(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Order domain property code
		
		/// <summary>
		/// Order domain property Id.
		/// </summary>
		public static readonly global::System.Guid OrderDomainPropertyId = new global::System.Guid(0xaa2e82c6, 0xbb99, 0x4ab5, 0x94, 0xcb, 0xfa, 0xb4, 0x04, 0xb8, 0x48, 0x62);
		
		/// <summary>
		/// Storage for Order
		/// </summary>
		private global::System.Int32 orderPropertyStorage = 999;
		
		/// <summary>
		/// Gets or sets the value of Order domain property.
		/// Description for FourDeep.Dizzle.Property.Order
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.Dizzle.Property/Order.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.Dizzle.Property/Order.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(999)]
		[DslModeling::DomainObjectId("aa2e82c6-bb99-4ab5-94cb-fab404b84862")]
		public global::System.Int32 Order
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return orderPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				OrderPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Property.Order domain property.
		/// </summary>
		internal sealed partial class OrderPropertyHandler : DslModeling::DomainPropertyValueHandler<Property, global::System.Int32>
		{
			private OrderPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Property.Order domain property value handler.
			/// </summary>
			public static readonly OrderPropertyHandler Instance = new OrderPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Property.Order domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return OrderDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(Property element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.orderPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Property element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.orderPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x31a6cb72, 0xfcfb, 0x4b9b, 0x9d, 0x39, 0x9a, 0x38, 0xf2, 0xcf, 0xa6, 0x6c);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for FourDeep.Dizzle.Property.Name
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.Dizzle.Property/Name.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.Dizzle.Property/Name.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("31a6cb72-fcfb-4b9b-9d39-9a38f2cfa66c")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Property.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Property, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Property.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Property.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Property element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Property element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Type domain property code
		
		/// <summary>
		/// Type domain property Id.
		/// </summary>
		public static readonly global::System.Guid TypeDomainPropertyId = new global::System.Guid(0x3478a9b5, 0xd483, 0x4f96, 0x90, 0x3e, 0x5d, 0x6d, 0x0c, 0x77, 0xe4, 0xe5);
		
		/// <summary>
		/// Gets or sets the value of Type domain property.
		/// Description for FourDeep.Dizzle.Property.Type
		/// </summary>
		[System.ComponentModel.Editor(typeof(PropertyTypeNameEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("FourDeep.Dizzle.Property/Type.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.Dizzle.Property/Type.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("3478a9b5-d483-4f96-903e-5d6d0c77e4e5")]
		public global::System.String Type
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return TypePropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Property.Type domain property.
		/// </summary>
		internal sealed partial class TypePropertyHandler : DslModeling::DomainPropertyValueHandler<Property, global::System.String>
		{
			private TypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Property.Type domain property value handler.
			/// </summary>
			public static readonly TypePropertyHandler Instance = new TypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Property.Type domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Property element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for Type because its Kind is
				// set to CustomStorage. Please provide the GetTypeValue()
				// method on the domain class.
				return element.GetTypeValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Property element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for Type because its Kind is
					// set to CustomStorage. Please provide the SetTypeValue()
					// method on the domain class.
					element.SetTypeValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
		#region Namespace domain property code
		
		/// <summary>
		/// Namespace domain property Id.
		/// </summary>
		public static readonly global::System.Guid NamespaceDomainPropertyId = new global::System.Guid(0x154d9453, 0xccdf, 0x4038, 0x85, 0x26, 0x65, 0x05, 0x74, 0xb0, 0x84, 0x08);
		
		/// <summary>
		/// Storage for Namespace
		/// </summary>
		private global::System.String namespacePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Namespace domain property.
		/// Description for FourDeep.Dizzle.Property.Namespace
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.Dizzle.Property/Namespace.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.Dizzle.Property/Namespace.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("154d9453-ccdf-4038-8526-650574b08408")]
		public global::System.String Namespace
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namespacePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamespacePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Property.Namespace domain property.
		/// </summary>
		internal sealed partial class NamespacePropertyHandler : DslModeling::DomainPropertyValueHandler<Property, global::System.String>
		{
			private NamespacePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Property.Namespace domain property value handler.
			/// </summary>
			public static readonly NamespacePropertyHandler Instance = new NamespacePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Property.Namespace domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NamespaceDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Property element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namespacePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Property element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namespacePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Description domain property code
		
		/// <summary>
		/// Description domain property Id.
		/// </summary>
		public static readonly global::System.Guid DescriptionDomainPropertyId = new global::System.Guid(0x643ca232, 0x59cd, 0x4538, 0x88, 0x41, 0x3f, 0xbc, 0xac, 0x46, 0x68, 0xd7);
		
		/// <summary>
		/// Storage for Description
		/// </summary>
		private global::System.String descriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Description domain property.
		/// Description for FourDeep.Dizzle.Property.Description
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.Dizzle.Property/Description.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.Dizzle.Property/Description.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("643ca232-59cd-4538-8841-3fbcac4668d7")]
		public global::System.String Description
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return descriptionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DescriptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Property.Description domain property.
		/// </summary>
		internal sealed partial class DescriptionPropertyHandler : DslModeling::DomainPropertyValueHandler<Property, global::System.String>
		{
			private DescriptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Property.Description domain property value handler.
			/// </summary>
			public static readonly DescriptionPropertyHandler Instance = new DescriptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Property.Description domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DescriptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Property element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.descriptionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Property element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.descriptionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region BoundedContext opposite domain role accessor
		/// <summary>
		/// Gets or sets BoundedContext.
		/// Description for FourDeep.Dizzle.BoundedContextHasProperties.Property
		/// </summary>
		public virtual BoundedContext BoundedContext
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::FourDeep.Dizzle.BoundedContextHasProperties.PropertyDomainRoleId) as BoundedContext;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::FourDeep.Dizzle.BoundedContextHasProperties.PropertyDomainRoleId, value);
			}
		}
		#endregion
		#region AggregateState opposite domain role accessor
		/// <summary>
		/// Gets or sets AggregateState.
		/// Description for FourDeep.Dizzle.AggregateStateHasProperties.Property
		/// </summary>
		public virtual AggregateState AggregateState
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::FourDeep.Dizzle.AggregateStateHasProperties.PropertyDomainRoleId) as AggregateState;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::FourDeep.Dizzle.AggregateStateHasProperties.PropertyDomainRoleId, value);
			}
		}
		#endregion
		#region DomainCommand opposite domain role accessor
		/// <summary>
		/// Gets or sets DomainCommand.
		/// Description for FourDeep.Dizzle.DomainCommandHasProperties.Property
		/// </summary>
		public virtual DomainCommand DomainCommand
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::FourDeep.Dizzle.DomainCommandHasProperties.PropertyDomainRoleId) as DomainCommand;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::FourDeep.Dizzle.DomainCommandHasProperties.PropertyDomainRoleId, value);
			}
		}
		#endregion
		#region DomainEvent opposite domain role accessor
		/// <summary>
		/// Gets or sets DomainEvent.
		/// Description for FourDeep.Dizzle.DomainEventHasProperties.Property
		/// </summary>
		public virtual DomainEvent DomainEvent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::FourDeep.Dizzle.DomainEventHasProperties.PropertyDomainRoleId) as DomainEvent;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::FourDeep.Dizzle.DomainEventHasProperties.PropertyDomainRoleId, value);
			}
		}
		#endregion
		#region Entity opposite domain role accessor
		/// <summary>
		/// Gets or sets Entity.
		/// Description for FourDeep.Dizzle.EntityHasProperties.Property
		/// </summary>
		public virtual Entity Entity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::FourDeep.Dizzle.EntityHasProperties.PropertyDomainRoleId) as Entity;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::FourDeep.Dizzle.EntityHasProperties.PropertyDomainRoleId, value);
			}
		}
		#endregion
		#region View opposite domain role accessor
		/// <summary>
		/// Gets or sets View.
		/// Description for FourDeep.Dizzle.ViewHasProperties.Property
		/// </summary>
		public virtual View View
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::FourDeep.Dizzle.ViewHasProperties.PropertyDomainRoleId) as View;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::FourDeep.Dizzle.ViewHasProperties.PropertyDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace FourDeep.Dizzle
{
	/// <summary>
	/// DomainClass View
	/// Description for FourDeep.Dizzle.View
	/// </summary>
	[DslDesign::DisplayNameResource("FourDeep.Dizzle.View.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("FourDeep.Dizzle.View.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::FourDeep.Dizzle.DizzleDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("026a87d3-71df-4a49-97ed-3e34e0fb0614")]
	public partial class View : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// View domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x026a87d3, 0x71df, 0x4a49, 0x97, 0xed, 0x3e, 0x34, 0xe0, 0xfb, 0x06, 0x14);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public View(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public View(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xb224bca2, 0x2991, 0x4300, 0xaf, 0xca, 0x70, 0xd0, 0x98, 0x9f, 0x59, 0xb4);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for FourDeep.Dizzle.View.Name
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.Dizzle.View/Name.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.Dizzle.View/Name.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("b224bca2-2991-4300-afca-70d0989f59b4")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the View.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<View, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the View.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the View.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(View element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(View element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Description domain property code
		
		/// <summary>
		/// Description domain property Id.
		/// </summary>
		public static readonly global::System.Guid DescriptionDomainPropertyId = new global::System.Guid(0xdd67fe5c, 0x7d49, 0x42c0, 0x97, 0x50, 0x93, 0x7c, 0x41, 0x33, 0x66, 0x11);
		
		/// <summary>
		/// Storage for Description
		/// </summary>
		private global::System.String descriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Description domain property.
		/// Description for FourDeep.Dizzle.View.Description
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.Dizzle.View/Description.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.Dizzle.View/Description.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("dd67fe5c-7d49-42c0-9750-937c41336611")]
		public global::System.String Description
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return descriptionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DescriptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the View.Description domain property.
		/// </summary>
		internal sealed partial class DescriptionPropertyHandler : DslModeling::DomainPropertyValueHandler<View, global::System.String>
		{
			private DescriptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the View.Description domain property value handler.
			/// </summary>
			public static readonly DescriptionPropertyHandler Instance = new DescriptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the View.Description domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DescriptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(View element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.descriptionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(View element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.descriptionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region BoundedContext opposite domain role accessor
		/// <summary>
		/// Gets or sets BoundedContext.
		/// Description for FourDeep.Dizzle.BoundedContextHasViews.View
		/// </summary>
		public virtual BoundedContext BoundedContext
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::FourDeep.Dizzle.BoundedContextHasViews.ViewDomainRoleId) as BoundedContext;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::FourDeep.Dizzle.BoundedContextHasViews.ViewDomainRoleId, value);
			}
		}
		#endregion
		#region Properties opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Properties.
		/// Description for FourDeep.Dizzle.ViewHasProperties.View
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Property> Properties
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Property>, Property>(global::FourDeep.Dizzle.ViewHasProperties.ViewDomainRoleId);
			}
		}
		#endregion
		#region DomainEvents opposite domain role accessor
		
		/// <summary>
		/// Gets a list of DomainEvents.
		/// Description for FourDeep.Dizzle.ViewHasDomainEvents.View
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<DomainEvent> DomainEvents
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<DomainEvent>, DomainEvent>(global::FourDeep.Dizzle.ViewHasDomainEvents.ViewDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::FourDeep.Dizzle.DomainEvent.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::FourDeep.Dizzle.Property.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::FourDeep.Dizzle.DomainEvent sourceDomainEvent1 = sourceElement as global::FourDeep.Dizzle.DomainEvent;
			if (sourceDomainEvent1 != null)
			{
				// Create link for path ViewHasDomainEvents.DomainEvents
				this.DomainEvents.Add(sourceDomainEvent1);

				return;
			}
				
			global::FourDeep.Dizzle.Property sourceProperty2 = sourceElement as global::FourDeep.Dizzle.Property;
			if (sourceProperty2 != null)
			{
				// Create link for path ViewHasProperties.Properties
				this.Properties.Add(sourceProperty2);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::FourDeep.Dizzle.DomainEvent sourceDomainEvent1 = sourceElement as global::FourDeep.Dizzle.DomainEvent;
			if (sourceDomainEvent1 != null)
			{
				// Delete link for path ViewHasDomainEvents.DomainEvents
				
				foreach (DslModeling::ElementLink link in global::FourDeep.Dizzle.ViewHasDomainEvents.GetLinks((global::FourDeep.Dizzle.View)this, sourceDomainEvent1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::FourDeep.Dizzle.ViewHasDomainEvents.ViewDomainRoleId, global::FourDeep.Dizzle.ViewHasDomainEvents.DomainEventDomainRoleId);
				}

				return;
			}
				
			global::FourDeep.Dizzle.Property sourceProperty2 = sourceElement as global::FourDeep.Dizzle.Property;
			if (sourceProperty2 != null)
			{
				// Delete link for path ViewHasProperties.Properties
				
				foreach (DslModeling::ElementLink link in global::FourDeep.Dizzle.ViewHasProperties.GetLinks((global::FourDeep.Dizzle.View)this, sourceProperty2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::FourDeep.Dizzle.ViewHasProperties.ViewDomainRoleId, global::FourDeep.Dizzle.ViewHasProperties.PropertyDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace FourDeep.Dizzle
{
	/// <summary>
	/// DomainClass DomainEvent
	/// Description for FourDeep.Dizzle.DomainEvent
	/// </summary>
	[DslDesign::DisplayNameResource("FourDeep.Dizzle.DomainEvent.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("FourDeep.Dizzle.DomainEvent.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::FourDeep.Dizzle.DizzleDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("3d8133f8-1198-48a3-89ae-947daa4b108f")]
	public partial class DomainEvent : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// DomainEvent domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3d8133f8, 0x1198, 0x48a3, 0x89, 0xae, 0x94, 0x7d, 0xaa, 0x4b, 0x10, 0x8f);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DomainEvent(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DomainEvent(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xab39f13d, 0x814c, 0x4dcd, 0x89, 0x8e, 0xd2, 0xc1, 0x2c, 0x0b, 0x13, 0x27);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for FourDeep.Dizzle.DomainEvent.Name
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.Dizzle.DomainEvent/Name.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.Dizzle.DomainEvent/Name.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("ab39f13d-814c-4dcd-898e-d2c12c0b1327")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DomainEvent.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<DomainEvent, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DomainEvent.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DomainEvent.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DomainEvent element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DomainEvent element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Description domain property code
		
		/// <summary>
		/// Description domain property Id.
		/// </summary>
		public static readonly global::System.Guid DescriptionDomainPropertyId = new global::System.Guid(0xb2098fa8, 0xf407, 0x4b77, 0x81, 0x4c, 0xa3, 0x40, 0x0e, 0x19, 0x11, 0x85);
		
		/// <summary>
		/// Storage for Description
		/// </summary>
		private global::System.String descriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Description domain property.
		/// Description for FourDeep.Dizzle.DomainEvent.Description
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.Dizzle.DomainEvent/Description.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.Dizzle.DomainEvent/Description.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("b2098fa8-f407-4b77-814c-a3400e191185")]
		public global::System.String Description
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return descriptionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DescriptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DomainEvent.Description domain property.
		/// </summary>
		internal sealed partial class DescriptionPropertyHandler : DslModeling::DomainPropertyValueHandler<DomainEvent, global::System.String>
		{
			private DescriptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DomainEvent.Description domain property value handler.
			/// </summary>
			public static readonly DescriptionPropertyHandler Instance = new DescriptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DomainEvent.Description domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DescriptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DomainEvent element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.descriptionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DomainEvent element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.descriptionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region BoundedContext opposite domain role accessor
		/// <summary>
		/// Gets or sets BoundedContext.
		/// Description for FourDeep.Dizzle.BoundedContextHasDomainEvents.DomainEvent
		/// </summary>
		public virtual BoundedContext BoundedContext
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::FourDeep.Dizzle.BoundedContextHasDomainEvents.DomainEventDomainRoleId) as BoundedContext;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::FourDeep.Dizzle.BoundedContextHasDomainEvents.DomainEventDomainRoleId, value);
			}
		}
		#endregion
		#region AggregateStates opposite domain role accessor
		
		/// <summary>
		/// Gets a list of AggregateStates.
		/// Description for
		/// FourDeep.Dizzle.AggregateStateSubscribesToDomainEvents.DomainEvent
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<AggregateState> AggregateStates
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<AggregateState>, AggregateState>(global::FourDeep.Dizzle.AggregateStateSubscribesToDomainEvents.DomainEventDomainRoleId);
			}
		}
		#endregion
		#region Properties opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Properties.
		/// Description for FourDeep.Dizzle.DomainEventHasProperties.DomainEvent
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Property> Properties
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Property>, Property>(global::FourDeep.Dizzle.DomainEventHasProperties.DomainEventDomainRoleId);
			}
		}
		#endregion
		#region View opposite domain role accessor
		/// <summary>
		/// Gets or sets View.
		/// Description for FourDeep.Dizzle.ViewHasDomainEvents.DomainEvent
		/// </summary>
		public virtual View View
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::FourDeep.Dizzle.ViewHasDomainEvents.DomainEventDomainRoleId) as View;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::FourDeep.Dizzle.ViewHasDomainEvents.DomainEventDomainRoleId, value);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::FourDeep.Dizzle.Property.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::FourDeep.Dizzle.Property sourceProperty1 = sourceElement as global::FourDeep.Dizzle.Property;
			if (sourceProperty1 != null)
			{
				// Create link for path DomainEventHasProperties.Properties
				this.Properties.Add(sourceProperty1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::FourDeep.Dizzle.Property sourceProperty1 = sourceElement as global::FourDeep.Dizzle.Property;
			if (sourceProperty1 != null)
			{
				// Delete link for path DomainEventHasProperties.Properties
				
				foreach (DslModeling::ElementLink link in global::FourDeep.Dizzle.DomainEventHasProperties.GetLinks((global::FourDeep.Dizzle.DomainEvent)this, sourceProperty1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::FourDeep.Dizzle.DomainEventHasProperties.DomainEventDomainRoleId, global::FourDeep.Dizzle.DomainEventHasProperties.PropertyDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace FourDeep.Dizzle
{
	/// <summary>
	/// DomainClass Entity
	/// Description for FourDeep.Dizzle.Entity
	/// </summary>
	[DslDesign::DisplayNameResource("FourDeep.Dizzle.Entity.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("FourDeep.Dizzle.Entity.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::FourDeep.Dizzle.DizzleDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("4fa0ec8d-a791-4bcb-95b6-28e93a554454")]
	public partial class Entity : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Entity domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4fa0ec8d, 0xa791, 0x4bcb, 0x95, 0xb6, 0x28, 0xe9, 0x3a, 0x55, 0x44, 0x54);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Entity(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Entity(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xd287c799, 0xecab, 0x4af0, 0x96, 0x61, 0x86, 0x9c, 0x18, 0xa0, 0xad, 0x19);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for FourDeep.Dizzle.Entity.Name
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.Dizzle.Entity/Name.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.Dizzle.Entity/Name.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("d287c799-ecab-4af0-9661-869c18a0ad19")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Entity.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Entity, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Entity.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Entity.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Entity element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Entity element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Description domain property code
		
		/// <summary>
		/// Description domain property Id.
		/// </summary>
		public static readonly global::System.Guid DescriptionDomainPropertyId = new global::System.Guid(0x93f5ac18, 0x467a, 0x4268, 0xb9, 0x4e, 0xd8, 0x21, 0x8e, 0x1a, 0x96, 0xab);
		
		/// <summary>
		/// Storage for Description
		/// </summary>
		private global::System.String descriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Description domain property.
		/// Description for FourDeep.Dizzle.Entity.Description
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.Dizzle.Entity/Description.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.Dizzle.Entity/Description.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("93f5ac18-467a-4268-b94e-d8218e1a96ab")]
		public global::System.String Description
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return descriptionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DescriptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Entity.Description domain property.
		/// </summary>
		internal sealed partial class DescriptionPropertyHandler : DslModeling::DomainPropertyValueHandler<Entity, global::System.String>
		{
			private DescriptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Entity.Description domain property value handler.
			/// </summary>
			public static readonly DescriptionPropertyHandler Instance = new DescriptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Entity.Description domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DescriptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Entity element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.descriptionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Entity element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.descriptionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Properties opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Properties.
		/// Description for FourDeep.Dizzle.EntityHasProperties.Entity
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Property> Properties
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Property>, Property>(global::FourDeep.Dizzle.EntityHasProperties.EntityDomainRoleId);
			}
		}
		#endregion
		#region BoundedContext opposite domain role accessor
		/// <summary>
		/// Gets or sets BoundedContext.
		/// Description for FourDeep.Dizzle.BoundedContextHasEntities.Entity
		/// </summary>
		public virtual BoundedContext BoundedContext
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::FourDeep.Dizzle.BoundedContextHasEntities.EntityDomainRoleId) as BoundedContext;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::FourDeep.Dizzle.BoundedContextHasEntities.EntityDomainRoleId, value);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::FourDeep.Dizzle.Property.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::FourDeep.Dizzle.Property sourceProperty1 = sourceElement as global::FourDeep.Dizzle.Property;
			if (sourceProperty1 != null)
			{
				// Create link for path EntityHasProperties.Properties
				this.Properties.Add(sourceProperty1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::FourDeep.Dizzle.Property sourceProperty1 = sourceElement as global::FourDeep.Dizzle.Property;
			if (sourceProperty1 != null)
			{
				// Delete link for path EntityHasProperties.Properties
				
				foreach (DslModeling::ElementLink link in global::FourDeep.Dizzle.EntityHasProperties.GetLinks((global::FourDeep.Dizzle.Entity)this, sourceProperty1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::FourDeep.Dizzle.EntityHasProperties.EntityDomainRoleId, global::FourDeep.Dizzle.EntityHasProperties.PropertyDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
