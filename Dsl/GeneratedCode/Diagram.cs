//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
using DslDiagrams = global::Microsoft.VisualStudio.Modeling.Diagrams;

[module: global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Scope = "type", Target = "FourDeep.Dizzle.DizzleDiagram")]

namespace FourDeep.Dizzle
{
	/// <summary>
	/// DomainClass DizzleDiagram
	/// Description for FourDeep.Dizzle.DizzleDiagram
	/// </summary>
	[DslDesign::DisplayNameResource("FourDeep.Dizzle.DizzleDiagram.DisplayName", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("FourDeep.Dizzle.DizzleDiagram.Description", typeof(global::FourDeep.Dizzle.DizzleDomainModel), "FourDeep.Dizzle.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::FourDeep.Dizzle.DizzleDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("8b9cbdc0-8eb8-45cb-9306-fe7816dcfca7")]
	public partial class DizzleDiagram : DslDiagrams::Diagram
	{
		#region Diagram boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		#endregion
		#region Toolbox filters
		private static global::System.ComponentModel.ToolboxItemFilterAttribute[] toolboxFilters = new global::System.ComponentModel.ToolboxItemFilterAttribute[] {
					new global::System.ComponentModel.ToolboxItemFilterAttribute(global::FourDeep.Dizzle.DizzleToolboxHelperBase.ToolboxFilterString, global::System.ComponentModel.ToolboxItemFilterType.Require) };
		
		/// <summary>
		/// Toolbox item filter attributes for this diagram.
		/// </summary>
		public override global::System.Collections.ICollection TargetToolboxItemFilterAttributes
		{
			get
			{
				return toolboxFilters;
			}
		}
		#endregion
		#region Auto-placement
		/// <summary>
		/// Indicate that child shapes should added through view fixup should be placed automatically.
		/// </summary>
		public override bool ShouldAutoPlaceChildShapes
		{
			get
			{
				return true;
			}
		}
		#endregion
		#region Compartment support
		/// <summary>
		/// Whether compartment items change events are subscribed to.
		/// </summary>
		private bool subscribedCompartmentItemsEvents;
		
		/// <summary>
		/// Subscribe to events fired when compartment items changes.
		/// </summary>
		public void SubscribeCompartmentItemsEvents()
		{
			if (!subscribedCompartmentItemsEvents && this.Store != null)
			{
				subscribedCompartmentItemsEvents = true;
				this.Store.EventManagerDirectory.ElementAdded.Add(new global::System.EventHandler<DslModeling::ElementAddedEventArgs>(this.CompartmentItemAdded));
				this.Store.EventManagerDirectory.ElementDeleted.Add(new global::System.EventHandler<DslModeling::ElementDeletedEventArgs>(this.CompartmentItemDeleted));
				this.Store.EventManagerDirectory.ElementPropertyChanged.Add(new global::System.EventHandler<DslModeling::ElementPropertyChangedEventArgs>(this.CompartmentItemPropertyChanged));
				this.Store.EventManagerDirectory.RolePlayerChanged.Add(new global::System.EventHandler<DslModeling::RolePlayerChangedEventArgs>(this.CompartmentItemRolePlayerChanged));
				this.Store.EventManagerDirectory.RolePlayerOrderChanged.Add(new global::System.EventHandler<DslModeling::RolePlayerOrderChangedEventArgs>(this.CompartmentItemRolePlayerOrderChanged));
			}
		}
		
		/// <summary>
		/// Unsubscribe to events fired when compartment items changes.
		/// </summary>
		public void UnsubscribeCompartmentItemsEvents()
		{
			if (subscribedCompartmentItemsEvents)
			{
				this.Store.EventManagerDirectory.ElementAdded.Remove(new global::System.EventHandler<DslModeling::ElementAddedEventArgs>(this.CompartmentItemAdded));
				this.Store.EventManagerDirectory.ElementDeleted.Remove(new global::System.EventHandler<DslModeling::ElementDeletedEventArgs>(this.CompartmentItemDeleted));
				this.Store.EventManagerDirectory.ElementPropertyChanged.Remove(new global::System.EventHandler<DslModeling::ElementPropertyChangedEventArgs>(this.CompartmentItemPropertyChanged));
				this.Store.EventManagerDirectory.RolePlayerChanged.Remove(new global::System.EventHandler<DslModeling::RolePlayerChangedEventArgs>(this.CompartmentItemRolePlayerChanged));
				this.Store.EventManagerDirectory.RolePlayerOrderChanged.Remove(new global::System.EventHandler<DslModeling::RolePlayerOrderChangedEventArgs>(this.CompartmentItemRolePlayerOrderChanged));
				subscribedCompartmentItemsEvents = false;
			}
		}
		
		#region Event handlers
		/// <summary>
		/// Event for element added.
		/// </summary>
		private void CompartmentItemAdded(object sender, DslModeling::ElementAddedEventArgs e)
		{
			CompartmentItemAddRule.ElementAdded(e, true /* repaint only */);
		}
		/// <summary>
		/// Event for element deleted.
		/// </summary>
		private void CompartmentItemDeleted(object sender, DslModeling::ElementDeletedEventArgs e)
		{
			CompartmentItemDeleteRule.ElementDeleted(e, true /* repaint only */);
		}
		/// <summary>
		/// Event for element property changed.
		/// </summary>
		private void CompartmentItemPropertyChanged(object sender, DslModeling::ElementPropertyChangedEventArgs e)
		{
			CompartmentItemChangeRule.ElementPropertyChanged(e, true /* repaint only */);
		}
		/// <summary>
		/// Event for role-player changed.
		/// </summary>
		private void CompartmentItemRolePlayerChanged(object sender, DslModeling::RolePlayerChangedEventArgs e)
		{
			CompartmentItemRolePlayerChangeRule.RolePlayerChanged(e, true /* repaint only */);
		}
		/// <summary>
		/// Event for role-player order changed.
		/// </summary>
		private void CompartmentItemRolePlayerOrderChanged(object sender, DslModeling::RolePlayerOrderChangedEventArgs e)
		{
			CompartmentItemRolePlayerPositionChangeRule.RolePlayerPositionChanged(e, true /* repaint only */);
		}
		#endregion
		#endregion
		#region Shape mapping
		/// <summary>
		/// Called during view fixup to ask the parent whether a shape should be created for the given child element.
		/// </summary>
		/// <remarks>
		/// Always return true, since we assume there is only one diagram per model file for DSL scenarios.
		/// </remarks>
		protected override bool ShouldAddShapeForElement(DslModeling::ModelElement element)
		{
			return true;
		}
		
		/// <summary>
		/// Called during view fixup to configure the given child element, after it has been created.
		/// </summary>
		/// <remarks>
		/// Custom code for choosing the shapes attached to either end of a connector is called from here.
		/// </remarks>
		protected override void OnChildConfiguring(DslDiagrams::ShapeElement child, bool createdDuringViewFixup)
		{
			DslDiagrams::NodeShape sourceShape;
			DslDiagrams::NodeShape targetShape;
			DslDiagrams::BinaryLinkShape connector = child as DslDiagrams::BinaryLinkShape;
			if(connector == null)
			{
				base.OnChildConfiguring(child, createdDuringViewFixup);
				return;
			}
			this.GetSourceAndTargetForConnector(connector, out sourceShape, out targetShape);
			
			global::System.Diagnostics.Debug.Assert(sourceShape != null && targetShape != null, "Unable to find source and target shapes for connector.");
			connector.Connect(sourceShape, targetShape);
		}
		
		/// <summary>
		/// helper method to find the shapes for either end of a connector, including calling the user's custom code
		/// </summary>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		internal void GetSourceAndTargetForConnector(DslDiagrams::BinaryLinkShape connector, out DslDiagrams::NodeShape sourceShape, out DslDiagrams::NodeShape targetShape)
		{
			sourceShape = null;
			targetShape = null;
			
			if (sourceShape == null || targetShape == null)
			{
				DslDiagrams::NodeShape[] endShapes = GetEndShapesForConnector(connector);
				if(sourceShape == null)
				{
					sourceShape = endShapes[0];
				}
				if(targetShape == null)
				{
					targetShape = endShapes[1];
				}
			}
		}
		
		/// <summary>
		/// Helper method to find shapes for either end of a connector by looking for shapes associated with either end of the relationship mapped to the connector.
		/// </summary>
		private DslDiagrams::NodeShape[] GetEndShapesForConnector(DslDiagrams::BinaryLinkShape connector)
		{
			DslModeling::ElementLink link = connector.ModelElement as DslModeling::ElementLink;
			DslDiagrams::NodeShape sourceShape = null, targetShape = null;
			if (link != null)
			{
				global::System.Collections.ObjectModel.ReadOnlyCollection<DslModeling::ModelElement> linkedElements = link.LinkedElements;
				if (linkedElements.Count == 2)
				{
					DslDiagrams::Diagram currentDiagram = this.Diagram;
					DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[0]);
					foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
					{
						DslDiagrams::NodeShape shape = presentationElement as DslDiagrams::NodeShape;
						if (shape != null && shape.Diagram == currentDiagram)
						{
							sourceShape = shape;
							break;
						}
					}
					
					presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[1]);
					foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
					{
						DslDiagrams::NodeShape shape = presentationElement as DslDiagrams::NodeShape;
						if (shape != null && shape.Diagram == currentDiagram)
						{
							targetShape = shape;
							break;
						}
					}
		
				}
			}
			
			return new DslDiagrams::NodeShape[] { sourceShape, targetShape };
		}
		
		/// <summary>
		/// Most connectors are mapped to element links, but there can be exceptions. This method tell if a connector should be
		/// mapped to an element link.
		/// </summary>
		public override bool IsConnectorMappedToLink(DslDiagrams::BinaryLinkShape connector)
		{
			#region Check Parameters
			global::System.Diagnostics.Debug.Assert(connector != null);
			if (connector == null)
				throw new global::System.ArgumentNullException("connector");
			#endregion
			if (connector.GetType() == typeof(global::FourDeep.Dizzle.PropertyConnector))
				return false;
			return base.IsConnectorMappedToLink(connector);
		}
		
		/// <summary>
		/// Creates a new shape for the given model element as part of view fixup
		/// </summary>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily", Justification = "Generated code.")]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]
		protected override DslDiagrams::ShapeElement CreateChildShape(DslModeling::ModelElement element)
		{
			if(element is global::FourDeep.Dizzle.AggregateRoot)
			{
				global::FourDeep.Dizzle.AggregateRootShape newShape = new global::FourDeep.Dizzle.AggregateRootShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::FourDeep.Dizzle.Property)
			{
				global::FourDeep.Dizzle.PropertyShape newShape = new global::FourDeep.Dizzle.PropertyShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::FourDeep.Dizzle.AggregateState)
			{
				global::FourDeep.Dizzle.AggregateStateShape newShape = new global::FourDeep.Dizzle.AggregateStateShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::FourDeep.Dizzle.DomainCommand)
			{
				global::FourDeep.Dizzle.DomainCommandShape newShape = new global::FourDeep.Dizzle.DomainCommandShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::FourDeep.Dizzle.DomainEvent)
			{
				global::FourDeep.Dizzle.DomainEventShape newShape = new global::FourDeep.Dizzle.DomainEventShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::FourDeep.Dizzle.Entity)
			{
				global::FourDeep.Dizzle.EntityShape newShape = new global::FourDeep.Dizzle.EntityShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::FourDeep.Dizzle.View)
			{
				global::FourDeep.Dizzle.ViewShape newShape = new global::FourDeep.Dizzle.ViewShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::FourDeep.Dizzle.AggregateRootHandlesDomainCommands)
			{
				global::FourDeep.Dizzle.CommandConnector newShape = new global::FourDeep.Dizzle.CommandConnector(this.Partition);
				return newShape;
			}
			if(element is global::FourDeep.Dizzle.AggregateRootHasAggregateState)
			{
				global::FourDeep.Dizzle.AggregateStateConnector newShape = new global::FourDeep.Dizzle.AggregateStateConnector(this.Partition);
				return newShape;
			}
			if(element is global::FourDeep.Dizzle.AggregateStateSubscribesToDomainEvents)
			{
				global::FourDeep.Dizzle.DomainEventConnector newShape = new global::FourDeep.Dizzle.DomainEventConnector(this.Partition);
				return newShape;
			}
			return base.CreateChildShape(element);
		}
		#endregion
		#region Decorator mapping
		/// <summary>
		/// Initialize shape decorator mappings.  This is done here rather than in individual shapes because decorator maps
		/// are defined per diagram type rather than per shape type.
		/// </summary>
		protected override void InitializeShapeFields(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields)
		{
			base.InitializeShapeFields(shapeFields);
			global::FourDeep.Dizzle.AggregateRootShape.DecoratorsInitialized += AggregateRootShapeDecoratorMap.OnDecoratorsInitialized;
			global::FourDeep.Dizzle.PropertyShape.DecoratorsInitialized += PropertyShapeDecoratorMap.OnDecoratorsInitialized;
			global::FourDeep.Dizzle.AggregateStateShape.DecoratorsInitialized += AggregateStateShapeDecoratorMap.OnDecoratorsInitialized;
			global::FourDeep.Dizzle.DomainCommandShape.DecoratorsInitialized += DomainCommandShapeDecoratorMap.OnDecoratorsInitialized;
			global::FourDeep.Dizzle.DomainEventShape.DecoratorsInitialized += DomainEventShapeDecoratorMap.OnDecoratorsInitialized;
			global::FourDeep.Dizzle.EntityShape.DecoratorsInitialized += EntityShapeDecoratorMap.OnDecoratorsInitialized;
			global::FourDeep.Dizzle.ViewShape.DecoratorsInitialized += ViewShapeDecoratorMap.OnDecoratorsInitialized;
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for AggregateRootShape.
		/// </summary>
		internal static partial class AggregateRootShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for AggregateRootShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::FourDeep.Dizzle.AggregateRoot.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::FourDeep.Dizzle.AggregateRoot.DescriptionDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "DescriptionDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for PropertyShape.
		/// </summary>
		internal static partial class PropertyShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for PropertyShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::FourDeep.Dizzle.Property.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::FourDeep.Dizzle.Property.OrderDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "OrderDecorator").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::FourDeep.Dizzle.Property.TypeDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TypeDecorator").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::FourDeep.Dizzle.Property.NamespaceDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NamespaceDecorator").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::FourDeep.Dizzle.Property.DescriptionDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "DescriptionDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for AggregateStateShape.
		/// </summary>
		internal static partial class AggregateStateShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for AggregateStateShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::FourDeep.Dizzle.AggregateState.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "StateNameDecorator").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::FourDeep.Dizzle.AggregateState.DescriptionDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "DescriptionDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for DomainCommandShape.
		/// </summary>
		internal static partial class DomainCommandShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for DomainCommandShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::FourDeep.Dizzle.DomainCommand.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "CommandNameDecorator").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::FourDeep.Dizzle.DomainCommand.DescriptionDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "DescriptionDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for DomainEventShape.
		/// </summary>
		internal static partial class DomainEventShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for DomainEventShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::FourDeep.Dizzle.DomainEvent.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::FourDeep.Dizzle.DomainEvent.DescriptionDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "DescriptionDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for EntityShape.
		/// </summary>
		internal static partial class EntityShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for EntityShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::FourDeep.Dizzle.Entity.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::FourDeep.Dizzle.Entity.DescriptionDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "DescriptionDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for ViewShape.
		/// </summary>
		internal static partial class ViewShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for ViewShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::FourDeep.Dizzle.View.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::FourDeep.Dizzle.View.DescriptionDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "DescriptionDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		#endregion
		
		#region Connect actions
		private bool changingMouseAction;
		private global::FourDeep.Dizzle.CommandRelationshipConnectAction commandRelationshipConnectAction;
		private global::FourDeep.Dizzle.AggregateStateRelationshipConnectAction aggregateStateRelationshipConnectAction;
		private global::FourDeep.Dizzle.EventRelationshipConnectAction eventRelationshipConnectAction;
		/// <summary>
		/// Virtual method to provide a filter when to select the mouse action
		/// </summary>
		/// <param name="activeView">Currently active view</param>
		/// <param name="filter">filter string used to filter the toolbox items</param>
		protected virtual bool SelectedToolboxItemSupportsFilterString(DslDiagrams::DiagramView activeView, string filter)
		{
			return activeView.SelectedToolboxItemSupportsFilterString(filter);
		}
		/// <summary>
		/// Override to provide the right mouse action when trying
		/// to create links on the diagram
		/// </summary>
		/// <param name="pointArgs"></param>
		public override void OnViewMouseEnter(DslDiagrams::DiagramPointEventArgs pointArgs)
		{
			if (pointArgs  == null) throw new global::System.ArgumentNullException("pointArgs");
		
			DslDiagrams::DiagramView activeView = this.ActiveDiagramView;
			if(activeView != null)
			{
				DslDiagrams::MouseAction action = null;
				if (SelectedToolboxItemSupportsFilterString(activeView, global::FourDeep.Dizzle.DizzleToolboxHelper.CommandRelationshipFilterString))
				{
					if (this.commandRelationshipConnectAction == null)
					{
						this.commandRelationshipConnectAction = new global::FourDeep.Dizzle.CommandRelationshipConnectAction(this);
						this.commandRelationshipConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.commandRelationshipConnectAction;
				} 
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::FourDeep.Dizzle.DizzleToolboxHelper.AggregateStateRelationshipFilterString))
				{
					if (this.aggregateStateRelationshipConnectAction == null)
					{
						this.aggregateStateRelationshipConnectAction = new global::FourDeep.Dizzle.AggregateStateRelationshipConnectAction(this);
						this.aggregateStateRelationshipConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.aggregateStateRelationshipConnectAction;
				} 
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::FourDeep.Dizzle.DizzleToolboxHelper.EventRelationshipFilterString))
				{
					if (this.eventRelationshipConnectAction == null)
					{
						this.eventRelationshipConnectAction = new global::FourDeep.Dizzle.EventRelationshipConnectAction(this);
						this.eventRelationshipConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.eventRelationshipConnectAction;
				} 
				else
				{
					action = null;
				}
				
				if (pointArgs.DiagramClientView.ActiveMouseAction != action)
				{
					try
					{
						this.changingMouseAction = true;
						pointArgs.DiagramClientView.ActiveMouseAction = action;
					}
					finally
					{
						this.changingMouseAction = false;
					}
				}
			}
		}
		
		/// <summary>
		/// Snap toolbox selection back to regular pointer after using a custom connect action.
		/// </summary>
		private void OnConnectActionDeactivated(object sender, DslDiagrams::DiagramEventArgs e)
		{
			OnMouseActionDeactivated();
		}
		
		/// <summary>
		/// Overridable method to manage the mouse deactivation. The default implementation snap stoolbox selection back to regular pointer 
		/// after using a custom connect action.
		/// </summary>
		protected virtual void OnMouseActionDeactivated()
		{
			DslDiagrams::DiagramView activeView = this.ActiveDiagramView;
		
			if (activeView != null && activeView.Toolbox != null)
			{
				// If we're not changing mouse action due to changing toolbox selection change,
				// reset toolbox selection.
				if (!this.changingMouseAction)
				{
					activeView.Toolbox.SelectedToolboxItemUsed();
				}
			}
		}
		#endregion
		
		/// <summary>
		/// Dispose of connect actions.
		/// </summary>
		protected override void Dispose(bool disposing)
		{
			try
			{
				if(disposing)
				{
					if(this.commandRelationshipConnectAction != null)
					{
						this.commandRelationshipConnectAction.Dispose();
						this.commandRelationshipConnectAction = null;
					}
					if(this.aggregateStateRelationshipConnectAction != null)
					{
						this.aggregateStateRelationshipConnectAction.Dispose();
						this.aggregateStateRelationshipConnectAction = null;
					}
					if(this.eventRelationshipConnectAction != null)
					{
						this.eventRelationshipConnectAction.Dispose();
						this.eventRelationshipConnectAction = null;
					}
					this.UnsubscribeCompartmentItemsEvents();
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}
		#region Constructors, domain class Id
	
		/// <summary>
		/// DizzleDiagram domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8b9cbdc0, 0x8eb8, 0x45cb, 0x93, 0x06, 0xfe, 0x78, 0x16, 0xdc, 0xfc, 0xa7);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DizzleDiagram(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DizzleDiagram(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace FourDeep.Dizzle
{
	
		/// <summary>
		/// Double derived implementation for the rule that initiates view fixup when an element that has an associated shape is added to the model.
		/// This now enables the DSL author to everride the SkipFixUp() method 
		/// </summary>
		internal partial class FixUpDiagramBase : DslModeling::AddRule
		{
			protected virtual bool SkipFixup(DslModeling::ModelElement childElement)
			{
				return childElement.IsDeleted;
			}
		}
	
		/// <summary>
		/// Rule that initiates view fixup when an element that has an associated shape is added to the model. 
		/// </summary>
		[DslModeling::RuleOn(typeof(global::FourDeep.Dizzle.View), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::FourDeep.Dizzle.Entity), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::FourDeep.Dizzle.AggregateRootHandlesDomainCommands), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::FourDeep.Dizzle.AggregateStateSubscribesToDomainEvents), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::FourDeep.Dizzle.AggregateRootHasAggregateState), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::FourDeep.Dizzle.Property), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::FourDeep.Dizzle.AggregateRoot), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::FourDeep.Dizzle.AggregateState), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::FourDeep.Dizzle.DomainEvent), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::FourDeep.Dizzle.DomainCommand), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		internal sealed partial class FixUpDiagram : FixUpDiagramBase
		{
			[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
			public override void ElementAdded(DslModeling::ElementAddedEventArgs e)
			{
				if(e == null) throw new global::System.ArgumentNullException("e");
			
				DslModeling::ModelElement childElement = e.ModelElement;
				if (this.SkipFixup(childElement))
					return;
				DslModeling::ModelElement parentElement;
				if(childElement is DslModeling::ElementLink)
				{
					parentElement = GetParentForRelationship((DslModeling::ElementLink)childElement);
				} else
				if(childElement is global::FourDeep.Dizzle.View)
				{
					parentElement = GetParentForView((global::FourDeep.Dizzle.View)childElement);
				} else
				if(childElement is global::FourDeep.Dizzle.Entity)
				{
					parentElement = GetParentForEntity((global::FourDeep.Dizzle.Entity)childElement);
				} else
				if(childElement is global::FourDeep.Dizzle.Property)
				{
					parentElement = GetParentForProperty((global::FourDeep.Dizzle.Property)childElement);
				} else
				if(childElement is global::FourDeep.Dizzle.AggregateRoot)
				{
					parentElement = GetParentForAggregateRoot((global::FourDeep.Dizzle.AggregateRoot)childElement);
				} else
				if(childElement is global::FourDeep.Dizzle.AggregateState)
				{
					parentElement = GetParentForAggregateState((global::FourDeep.Dizzle.AggregateState)childElement);
				} else
				if(childElement is global::FourDeep.Dizzle.DomainEvent)
				{
					parentElement = GetParentForDomainEvent((global::FourDeep.Dizzle.DomainEvent)childElement);
				} else
				if(childElement is global::FourDeep.Dizzle.DomainCommand)
				{
					parentElement = GetParentForDomainCommand((global::FourDeep.Dizzle.DomainCommand)childElement);
				} else
				{
					parentElement = null;
				}
				
				if(parentElement != null)
				{
					DslDiagrams::Diagram.FixUpDiagram(parentElement, childElement);
				}
			}
			public static global::FourDeep.Dizzle.BoundedContext GetParentForAggregateRoot( global::FourDeep.Dizzle.AggregateRoot root )
			{
				// Segments 0 and 1
				global::FourDeep.Dizzle.BoundedContext result = root.BoundedContext;
				if ( result == null ) return null;
				return result;
			}
			public static global::FourDeep.Dizzle.BoundedContext GetParentForProperty( global::FourDeep.Dizzle.Property root )
			{
				// Segments 0 and 1
				global::FourDeep.Dizzle.BoundedContext result = root.BoundedContext;
				if ( result == null ) return null;
				return result;
			}
			public static global::FourDeep.Dizzle.BoundedContext GetParentForAggregateState( global::FourDeep.Dizzle.AggregateState root )
			{
				// Segments 0 and 1
				global::FourDeep.Dizzle.AggregateRoot root2 = root.AggregateRoot;
				if ( root2 == null ) return null;
				// Segments 2 and 3
				global::FourDeep.Dizzle.BoundedContext result = root2.BoundedContext;
				if ( result == null ) return null;
				return result;
			}
			public static global::FourDeep.Dizzle.BoundedContext GetParentForDomainCommand( global::FourDeep.Dizzle.DomainCommand root )
			{
				// Segments 0 and 1
				global::FourDeep.Dizzle.BoundedContext result = root.BoundedContext;
				if ( result == null ) return null;
				return result;
			}
			public static global::FourDeep.Dizzle.BoundedContext GetParentForDomainEvent( global::FourDeep.Dizzle.DomainEvent root )
			{
				// Segments 0 and 1
				global::FourDeep.Dizzle.BoundedContext result = root.BoundedContext;
				if ( result == null ) return null;
				return result;
			}
			public static global::FourDeep.Dizzle.BoundedContext GetParentForEntity( global::FourDeep.Dizzle.Entity root )
			{
				// Segments 0 and 1
				global::FourDeep.Dizzle.BoundedContext result = root.BoundedContext;
				if ( result == null ) return null;
				return result;
			}
			public static global::FourDeep.Dizzle.BoundedContext GetParentForView( global::FourDeep.Dizzle.View root )
			{
				// Segments 0 and 1
				global::FourDeep.Dizzle.BoundedContext result = root.BoundedContext;
				if ( result == null ) return null;
				return result;
			}
			private static DslModeling::ModelElement GetParentForRelationship(DslModeling::ElementLink elementLink)
			{
				global::System.Collections.ObjectModel.ReadOnlyCollection<DslModeling::ModelElement> linkedElements = elementLink.LinkedElements;
	
				if (linkedElements.Count == 2)
				{
					DslDiagrams::ShapeElement sourceShape = linkedElements[0] as DslDiagrams::ShapeElement;
					DslDiagrams::ShapeElement targetShape = linkedElements[1] as DslDiagrams::ShapeElement;
	
					if(sourceShape == null)
					{
						DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[0]);
						foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
						{
							DslDiagrams::ShapeElement shape = presentationElement as DslDiagrams::ShapeElement;
							if (shape != null)
							{
								sourceShape = shape;
								break;
							}
						}
					}
					
					if(targetShape == null)
					{
						DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[1]);
						foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
						{
							DslDiagrams::ShapeElement shape = presentationElement as DslDiagrams::ShapeElement;
							if (shape != null)
							{
								targetShape = shape;
								break;
							}
						}
					}
					
					if(sourceShape == null || targetShape == null)
					{
						global::System.Diagnostics.Debug.Fail("Unable to find source and/or target shape for view fixup.");
						return null;
					}
	
					DslDiagrams::ShapeElement sourceParent = sourceShape.ParentShape;
					DslDiagrams::ShapeElement targetParent = targetShape.ParentShape;
	
					while (sourceParent != targetParent && sourceParent != null)
					{
						DslDiagrams::ShapeElement curParent = targetParent;
						while (sourceParent != curParent && curParent != null)
						{
							curParent = curParent.ParentShape;
						}
	
						if(sourceParent == curParent)
						{
							break;
						}
						else
						{
							sourceParent = sourceParent.ParentShape;
						}
					}
	
					while (sourceParent != null)
					{
						// ensure that the parent can parent connectors (i.e., a diagram or a swimlane).
						if(sourceParent is DslDiagrams::Diagram || sourceParent is DslDiagrams::SwimlaneShape)
						{
							break;
						}
						else
						{
							sourceParent = sourceParent.ParentShape;
						}
					}
	
					global::System.Diagnostics.Debug.Assert(sourceParent != null && sourceParent.ModelElement != null, "Unable to find common parent for view fixup.");
					return sourceParent.ModelElement;
				}
	
				return null;
			}
		}
		
		/// <summary>
		/// Rule to update compartments when an item is added to the list
		/// </summary>
		[DslModeling::RuleOn(typeof(global::FourDeep.Dizzle.AggregateStateHasProperties), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::FourDeep.Dizzle.DomainCommandHasProperties), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::FourDeep.Dizzle.DomainEventHasProperties), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::FourDeep.Dizzle.EntityHasProperties), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::FourDeep.Dizzle.ViewHasProperties), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::FourDeep.Dizzle.ViewHasDomainEvents), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		internal sealed class CompartmentItemAddRule : DslModeling::AddRule
		{
			/// <summary>
			/// Called when an element is added. 
			/// </summary>
			/// <param name="e"></param>
			public override void ElementAdded(DslModeling::ElementAddedEventArgs e)
			{
				ElementAdded(e, false);
			}
	
			internal static void ElementAdded(DslModeling::ElementAddedEventArgs e, bool repaintOnly)
			{
				if(e==null) throw new global::System.ArgumentNullException("e");
				if (e.ModelElement.IsDeleted)
					return;
				if(e.ModelElement is global::FourDeep.Dizzle.AggregateStateHasProperties)
				{
					global::System.Collections.IEnumerable elements = GetAggregateStateForAggregateStateShapePropertiesFromLastLink((global::FourDeep.Dizzle.AggregateStateHasProperties)e.ModelElement);
					UpdateCompartments(elements, typeof(global::FourDeep.Dizzle.AggregateStateShape), "Properties", repaintOnly);
				}
				if(e.ModelElement is global::FourDeep.Dizzle.DomainCommandHasProperties)
				{
					global::System.Collections.IEnumerable elements = GetDomainCommandForDomainCommandShapePropertiesFromLastLink((global::FourDeep.Dizzle.DomainCommandHasProperties)e.ModelElement);
					UpdateCompartments(elements, typeof(global::FourDeep.Dizzle.DomainCommandShape), "Properties", repaintOnly);
				}
				if(e.ModelElement is global::FourDeep.Dizzle.DomainEventHasProperties)
				{
					global::System.Collections.IEnumerable elements = GetDomainEventForDomainEventShapePropertiesFromLastLink((global::FourDeep.Dizzle.DomainEventHasProperties)e.ModelElement);
					UpdateCompartments(elements, typeof(global::FourDeep.Dizzle.DomainEventShape), "Properties", repaintOnly);
				}
				if(e.ModelElement is global::FourDeep.Dizzle.EntityHasProperties)
				{
					global::System.Collections.IEnumerable elements = GetEntityForEntityShapePropertiesFromLastLink((global::FourDeep.Dizzle.EntityHasProperties)e.ModelElement);
					UpdateCompartments(elements, typeof(global::FourDeep.Dizzle.EntityShape), "Properties", repaintOnly);
				}
				if(e.ModelElement is global::FourDeep.Dizzle.ViewHasProperties)
				{
					global::System.Collections.IEnumerable elements = GetViewForViewShapePropertiesFromLastLink((global::FourDeep.Dizzle.ViewHasProperties)e.ModelElement);
					UpdateCompartments(elements, typeof(global::FourDeep.Dizzle.ViewShape), "Properties", repaintOnly);
				}
				if(e.ModelElement is global::FourDeep.Dizzle.ViewHasDomainEvents)
				{
					global::System.Collections.IEnumerable elements = GetViewForViewShapeEventsFromLastLink((global::FourDeep.Dizzle.ViewHasDomainEvents)e.ModelElement);
					UpdateCompartments(elements, typeof(global::FourDeep.Dizzle.ViewShape), "Events", repaintOnly);
				}
			}
			
			#region static DomainPath traversal methods to get the list of compartments to update
			internal static global::System.Collections.ICollection GetAggregateStateForAggregateStateShapePropertiesFromLastLink(global::FourDeep.Dizzle.AggregateStateHasProperties root)
			{
				// Segment 0
				global::FourDeep.Dizzle.AggregateState result = root.AggregateState;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			internal static global::System.Collections.ICollection GetAggregateStateForAggregateStateShapeProperties(global::FourDeep.Dizzle.Property root)
			{
				// Segments 1 and 0
				global::FourDeep.Dizzle.AggregateState result = root.AggregateState;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			internal static global::System.Collections.ICollection GetDomainCommandForDomainCommandShapePropertiesFromLastLink(global::FourDeep.Dizzle.DomainCommandHasProperties root)
			{
				// Segment 0
				global::FourDeep.Dizzle.DomainCommand result = root.DomainCommand;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			internal static global::System.Collections.ICollection GetDomainCommandForDomainCommandShapeProperties(global::FourDeep.Dizzle.Property root)
			{
				// Segments 1 and 0
				global::FourDeep.Dizzle.DomainCommand result = root.DomainCommand;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			internal static global::System.Collections.ICollection GetDomainEventForDomainEventShapePropertiesFromLastLink(global::FourDeep.Dizzle.DomainEventHasProperties root)
			{
				// Segment 0
				global::FourDeep.Dizzle.DomainEvent result = root.DomainEvent;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			internal static global::System.Collections.ICollection GetDomainEventForDomainEventShapeProperties(global::FourDeep.Dizzle.Property root)
			{
				// Segments 1 and 0
				global::FourDeep.Dizzle.DomainEvent result = root.DomainEvent;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			internal static global::System.Collections.ICollection GetEntityForEntityShapePropertiesFromLastLink(global::FourDeep.Dizzle.EntityHasProperties root)
			{
				// Segment 0
				global::FourDeep.Dizzle.Entity result = root.Entity;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			internal static global::System.Collections.ICollection GetEntityForEntityShapeProperties(global::FourDeep.Dizzle.Property root)
			{
				// Segments 1 and 0
				global::FourDeep.Dizzle.Entity result = root.Entity;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			internal static global::System.Collections.ICollection GetViewForViewShapePropertiesFromLastLink(global::FourDeep.Dizzle.ViewHasProperties root)
			{
				// Segment 0
				global::FourDeep.Dizzle.View result = root.View;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			internal static global::System.Collections.ICollection GetViewForViewShapeProperties(global::FourDeep.Dizzle.Property root)
			{
				// Segments 1 and 0
				global::FourDeep.Dizzle.View result = root.View;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			internal static global::System.Collections.ICollection GetViewForViewShapeEventsFromLastLink(global::FourDeep.Dizzle.ViewHasDomainEvents root)
			{
				// Segment 0
				global::FourDeep.Dizzle.View result = root.View;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			internal static global::System.Collections.ICollection GetViewForViewShapeEvents(global::FourDeep.Dizzle.DomainEvent root)
			{
				// Segments 1 and 0
				global::FourDeep.Dizzle.View result = root.View;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			#endregion
	
			#region helper method to update compartments 
			/// <summary>
			/// Updates the compartments for the shapes associated to the given list of model elements
			/// </summary>
			/// <param name="elements">List of model elements</param>
			/// <param name="shapeType">The type of shape that needs updating</param>
			/// <param name="compartmentName">The name of the compartment to update</param>
			/// <param name="repaintOnly">If true, the method will only invalidate the shape for a repaint, without re-initializing the shape.</param>
			internal static void UpdateCompartments(global::System.Collections.IEnumerable elements, global::System.Type shapeType, string compartmentName, bool repaintOnly)
			{
				foreach (DslModeling::ModelElement element in elements)
				{
					DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> pels = DslDiagrams::PresentationViewsSubject.GetPresentation(element);
					foreach (DslDiagrams::PresentationElement pel in pels)
					{
						DslDiagrams::CompartmentShape compartmentShape = pel as DslDiagrams::CompartmentShape;
						if (compartmentShape != null && shapeType.IsAssignableFrom(compartmentShape.GetType()))
						{
							if (repaintOnly)
							{
								compartmentShape.Invalidate();
							}
							else
							{
								foreach(DslDiagrams::CompartmentMapping mapping in compartmentShape.GetCompartmentMappings())
								{
									if(mapping.CompartmentId==compartmentName)
									{
										mapping.InitializeCompartmentShape(compartmentShape);
										break;
									}
								}
							}
						}
					}
				}
			}
			#endregion
		}
		
		/// <summary>
		/// Rule to update compartments when an items is removed from the list
		/// </summary>
		[DslModeling::RuleOn(typeof(global::FourDeep.Dizzle.AggregateStateHasProperties), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::FourDeep.Dizzle.DomainCommandHasProperties), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::FourDeep.Dizzle.DomainEventHasProperties), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::FourDeep.Dizzle.EntityHasProperties), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::FourDeep.Dizzle.ViewHasProperties), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::FourDeep.Dizzle.ViewHasDomainEvents), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		internal sealed class CompartmentItemDeleteRule : DslModeling::DeleteRule
		{
			/// <summary>
			/// Called when an element is deleted
			/// </summary>
			/// <param name="e"></param>
			public override void ElementDeleted(DslModeling::ElementDeletedEventArgs e)
			{
				ElementDeleted(e, false);
			}
			
			internal static void ElementDeleted(DslModeling::ElementDeletedEventArgs e, bool repaintOnly)
			{
				if(e==null) throw new global::System.ArgumentNullException("e");
				if(e.ModelElement is global::FourDeep.Dizzle.AggregateStateHasProperties)
				{
					global::System.Collections.ICollection elements = CompartmentItemAddRule.GetAggregateStateForAggregateStateShapePropertiesFromLastLink((global::FourDeep.Dizzle.AggregateStateHasProperties)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::FourDeep.Dizzle.AggregateStateShape), "Properties", repaintOnly);
				}
				if(e.ModelElement is global::FourDeep.Dizzle.DomainCommandHasProperties)
				{
					global::System.Collections.ICollection elements = CompartmentItemAddRule.GetDomainCommandForDomainCommandShapePropertiesFromLastLink((global::FourDeep.Dizzle.DomainCommandHasProperties)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::FourDeep.Dizzle.DomainCommandShape), "Properties", repaintOnly);
				}
				if(e.ModelElement is global::FourDeep.Dizzle.DomainEventHasProperties)
				{
					global::System.Collections.ICollection elements = CompartmentItemAddRule.GetDomainEventForDomainEventShapePropertiesFromLastLink((global::FourDeep.Dizzle.DomainEventHasProperties)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::FourDeep.Dizzle.DomainEventShape), "Properties", repaintOnly);
				}
				if(e.ModelElement is global::FourDeep.Dizzle.EntityHasProperties)
				{
					global::System.Collections.ICollection elements = CompartmentItemAddRule.GetEntityForEntityShapePropertiesFromLastLink((global::FourDeep.Dizzle.EntityHasProperties)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::FourDeep.Dizzle.EntityShape), "Properties", repaintOnly);
				}
				if(e.ModelElement is global::FourDeep.Dizzle.ViewHasProperties)
				{
					global::System.Collections.ICollection elements = CompartmentItemAddRule.GetViewForViewShapePropertiesFromLastLink((global::FourDeep.Dizzle.ViewHasProperties)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::FourDeep.Dizzle.ViewShape), "Properties", repaintOnly);
				}
				if(e.ModelElement is global::FourDeep.Dizzle.ViewHasDomainEvents)
				{
					global::System.Collections.ICollection elements = CompartmentItemAddRule.GetViewForViewShapeEventsFromLastLink((global::FourDeep.Dizzle.ViewHasDomainEvents)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::FourDeep.Dizzle.ViewShape), "Events", repaintOnly);
				}
			}
		}
		
		/// <summary>
		/// Rule to update compartments when the property on an item being displayed changes.
		/// </summary>
		[DslModeling::RuleOn(typeof(global::FourDeep.Dizzle.Property), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::FourDeep.Dizzle.DomainEvent), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		internal sealed class CompartmentItemChangeRule : DslModeling::ChangeRule 
		{
			/// <summary>
			/// Called when an element is changed
			/// </summary>
			/// <param name="e"></param>
			public override void ElementPropertyChanged(DslModeling::ElementPropertyChangedEventArgs e)
			{
				ElementPropertyChanged(e, false);
			}
			
			internal static void ElementPropertyChanged(DslModeling::ElementPropertyChangedEventArgs e, bool repaintOnly)
			{
				if(e==null) throw new global::System.ArgumentNullException("e");
				if(e.ModelElement is global::FourDeep.Dizzle.Property && e.DomainProperty.Id == global::FourDeep.Dizzle.Property.NameDomainPropertyId)
				{
					global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetAggregateStateForAggregateStateShapeProperties((global::FourDeep.Dizzle.Property)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::FourDeep.Dizzle.AggregateStateShape), "Properties", repaintOnly);
				}
				if(e.ModelElement is global::FourDeep.Dizzle.Property && e.DomainProperty.Id == global::FourDeep.Dizzle.Property.NameDomainPropertyId)
				{
					global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetDomainCommandForDomainCommandShapeProperties((global::FourDeep.Dizzle.Property)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::FourDeep.Dizzle.DomainCommandShape), "Properties", repaintOnly);
				}
				if(e.ModelElement is global::FourDeep.Dizzle.Property && e.DomainProperty.Id == global::FourDeep.Dizzle.Property.NameDomainPropertyId)
				{
					global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetDomainEventForDomainEventShapeProperties((global::FourDeep.Dizzle.Property)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::FourDeep.Dizzle.DomainEventShape), "Properties", repaintOnly);
				}
				if(e.ModelElement is global::FourDeep.Dizzle.Property && e.DomainProperty.Id == global::FourDeep.Dizzle.Property.NameDomainPropertyId)
				{
					global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetEntityForEntityShapeProperties((global::FourDeep.Dizzle.Property)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::FourDeep.Dizzle.EntityShape), "Properties", repaintOnly);
				}
				if(e.ModelElement is global::FourDeep.Dizzle.Property && e.DomainProperty.Id == global::FourDeep.Dizzle.Property.NameDomainPropertyId)
				{
					global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetViewForViewShapeProperties((global::FourDeep.Dizzle.Property)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::FourDeep.Dizzle.ViewShape), "Properties", repaintOnly);
				}
				if(e.ModelElement is global::FourDeep.Dizzle.DomainEvent && e.DomainProperty.Id == global::FourDeep.Dizzle.DomainEvent.NameDomainPropertyId)
				{
					global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetViewForViewShapeEvents((global::FourDeep.Dizzle.DomainEvent)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::FourDeep.Dizzle.ViewShape), "Events", repaintOnly);
				}
			}
		}
		
		/// <summary>
		/// Rule to update compartments when a roleplayer change happens
		/// </summary>
		[DslModeling::RuleOn(typeof(global::FourDeep.Dizzle.AggregateStateHasProperties), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::FourDeep.Dizzle.DomainCommandHasProperties), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::FourDeep.Dizzle.DomainEventHasProperties), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::FourDeep.Dizzle.EntityHasProperties), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::FourDeep.Dizzle.ViewHasProperties), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::FourDeep.Dizzle.ViewHasDomainEvents), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		internal sealed class CompartmentItemRolePlayerChangeRule : DslModeling::RolePlayerChangeRule 
		{
			/// <summary>
			/// Called when the roleplayer on a link changes.
			/// </summary>
			/// <param name="e"></param>
			public override void RolePlayerChanged(DslModeling::RolePlayerChangedEventArgs e)
			{
				RolePlayerChanged(e, false);
			}
			
			internal static void RolePlayerChanged(DslModeling::RolePlayerChangedEventArgs e, bool repaintOnly)
			{
				if(e==null) throw new global::System.ArgumentNullException("e");
				if(typeof(global::FourDeep.Dizzle.AggregateStateHasProperties).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(e.DomainRole.IsSource)
					{
						//global::System.Collections.IEnumerable oldElements = CompartmentItemAddRule.GetAggregateStateForAggregateStateShapePropertiesFromLastLink((global::FourDeep.Dizzle.Property)e.OldRolePlayer);
						//foreach(DslModeling::ModelElement element in oldElements)
						//{
						//	DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> pels = DslDiagrams::PresentationViewsSubject.GetPresentation(element);
						//	foreach(DslDiagrams::PresentationElement pel in pels)
						//	{
						//		global::FourDeep.Dizzle.AggregateStateShape compartmentShape = pel as global::FourDeep.Dizzle.AggregateStateShape;
						//		if(compartmentShape != null)
						//		{
						//			compartmentShape.GetCompartmentMappings()[0].InitializeCompartmentShape(compartmentShape);
						//		}
						//	}
						//}
						
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetAggregateStateForAggregateStateShapePropertiesFromLastLink((global::FourDeep.Dizzle.AggregateStateHasProperties)e.ElementLink);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::FourDeep.Dizzle.AggregateStateShape), "Properties", repaintOnly);
					}
					else 
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetAggregateStateForAggregateStateShapeProperties((global::FourDeep.Dizzle.Property)e.NewRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::FourDeep.Dizzle.AggregateStateShape), "Properties", repaintOnly);
					}
				}
				if(typeof(global::FourDeep.Dizzle.DomainCommandHasProperties).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(e.DomainRole.IsSource)
					{
						//global::System.Collections.IEnumerable oldElements = CompartmentItemAddRule.GetDomainCommandForDomainCommandShapePropertiesFromLastLink((global::FourDeep.Dizzle.Property)e.OldRolePlayer);
						//foreach(DslModeling::ModelElement element in oldElements)
						//{
						//	DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> pels = DslDiagrams::PresentationViewsSubject.GetPresentation(element);
						//	foreach(DslDiagrams::PresentationElement pel in pels)
						//	{
						//		global::FourDeep.Dizzle.DomainCommandShape compartmentShape = pel as global::FourDeep.Dizzle.DomainCommandShape;
						//		if(compartmentShape != null)
						//		{
						//			compartmentShape.GetCompartmentMappings()[0].InitializeCompartmentShape(compartmentShape);
						//		}
						//	}
						//}
						
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetDomainCommandForDomainCommandShapePropertiesFromLastLink((global::FourDeep.Dizzle.DomainCommandHasProperties)e.ElementLink);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::FourDeep.Dizzle.DomainCommandShape), "Properties", repaintOnly);
					}
					else 
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetDomainCommandForDomainCommandShapeProperties((global::FourDeep.Dizzle.Property)e.NewRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::FourDeep.Dizzle.DomainCommandShape), "Properties", repaintOnly);
					}
				}
				if(typeof(global::FourDeep.Dizzle.DomainEventHasProperties).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(e.DomainRole.IsSource)
					{
						//global::System.Collections.IEnumerable oldElements = CompartmentItemAddRule.GetDomainEventForDomainEventShapePropertiesFromLastLink((global::FourDeep.Dizzle.Property)e.OldRolePlayer);
						//foreach(DslModeling::ModelElement element in oldElements)
						//{
						//	DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> pels = DslDiagrams::PresentationViewsSubject.GetPresentation(element);
						//	foreach(DslDiagrams::PresentationElement pel in pels)
						//	{
						//		global::FourDeep.Dizzle.DomainEventShape compartmentShape = pel as global::FourDeep.Dizzle.DomainEventShape;
						//		if(compartmentShape != null)
						//		{
						//			compartmentShape.GetCompartmentMappings()[0].InitializeCompartmentShape(compartmentShape);
						//		}
						//	}
						//}
						
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetDomainEventForDomainEventShapePropertiesFromLastLink((global::FourDeep.Dizzle.DomainEventHasProperties)e.ElementLink);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::FourDeep.Dizzle.DomainEventShape), "Properties", repaintOnly);
					}
					else 
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetDomainEventForDomainEventShapeProperties((global::FourDeep.Dizzle.Property)e.NewRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::FourDeep.Dizzle.DomainEventShape), "Properties", repaintOnly);
					}
				}
				if(typeof(global::FourDeep.Dizzle.EntityHasProperties).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(e.DomainRole.IsSource)
					{
						//global::System.Collections.IEnumerable oldElements = CompartmentItemAddRule.GetEntityForEntityShapePropertiesFromLastLink((global::FourDeep.Dizzle.Property)e.OldRolePlayer);
						//foreach(DslModeling::ModelElement element in oldElements)
						//{
						//	DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> pels = DslDiagrams::PresentationViewsSubject.GetPresentation(element);
						//	foreach(DslDiagrams::PresentationElement pel in pels)
						//	{
						//		global::FourDeep.Dizzle.EntityShape compartmentShape = pel as global::FourDeep.Dizzle.EntityShape;
						//		if(compartmentShape != null)
						//		{
						//			compartmentShape.GetCompartmentMappings()[0].InitializeCompartmentShape(compartmentShape);
						//		}
						//	}
						//}
						
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetEntityForEntityShapePropertiesFromLastLink((global::FourDeep.Dizzle.EntityHasProperties)e.ElementLink);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::FourDeep.Dizzle.EntityShape), "Properties", repaintOnly);
					}
					else 
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetEntityForEntityShapeProperties((global::FourDeep.Dizzle.Property)e.NewRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::FourDeep.Dizzle.EntityShape), "Properties", repaintOnly);
					}
				}
				if(typeof(global::FourDeep.Dizzle.ViewHasProperties).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(e.DomainRole.IsSource)
					{
						//global::System.Collections.IEnumerable oldElements = CompartmentItemAddRule.GetViewForViewShapePropertiesFromLastLink((global::FourDeep.Dizzle.Property)e.OldRolePlayer);
						//foreach(DslModeling::ModelElement element in oldElements)
						//{
						//	DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> pels = DslDiagrams::PresentationViewsSubject.GetPresentation(element);
						//	foreach(DslDiagrams::PresentationElement pel in pels)
						//	{
						//		global::FourDeep.Dizzle.ViewShape compartmentShape = pel as global::FourDeep.Dizzle.ViewShape;
						//		if(compartmentShape != null)
						//		{
						//			compartmentShape.GetCompartmentMappings()[0].InitializeCompartmentShape(compartmentShape);
						//		}
						//	}
						//}
						
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetViewForViewShapePropertiesFromLastLink((global::FourDeep.Dizzle.ViewHasProperties)e.ElementLink);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::FourDeep.Dizzle.ViewShape), "Properties", repaintOnly);
					}
					else 
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetViewForViewShapeProperties((global::FourDeep.Dizzle.Property)e.NewRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::FourDeep.Dizzle.ViewShape), "Properties", repaintOnly);
					}
				}
				if(typeof(global::FourDeep.Dizzle.ViewHasDomainEvents).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(e.DomainRole.IsSource)
					{
						//global::System.Collections.IEnumerable oldElements = CompartmentItemAddRule.GetViewForViewShapeEventsFromLastLink((global::FourDeep.Dizzle.DomainEvent)e.OldRolePlayer);
						//foreach(DslModeling::ModelElement element in oldElements)
						//{
						//	DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> pels = DslDiagrams::PresentationViewsSubject.GetPresentation(element);
						//	foreach(DslDiagrams::PresentationElement pel in pels)
						//	{
						//		global::FourDeep.Dizzle.ViewShape compartmentShape = pel as global::FourDeep.Dizzle.ViewShape;
						//		if(compartmentShape != null)
						//		{
						//			compartmentShape.GetCompartmentMappings()[1].InitializeCompartmentShape(compartmentShape);
						//		}
						//	}
						//}
						
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetViewForViewShapeEventsFromLastLink((global::FourDeep.Dizzle.ViewHasDomainEvents)e.ElementLink);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::FourDeep.Dizzle.ViewShape), "Events", repaintOnly);
					}
					else 
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetViewForViewShapeEvents((global::FourDeep.Dizzle.DomainEvent)e.NewRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::FourDeep.Dizzle.ViewShape), "Events", repaintOnly);
					}
				}
			}
		}
	
		/// <summary>
		/// Rule to update compartments when the order of items in the list changes.
		/// </summary>
		[DslModeling::RuleOn(typeof(global::FourDeep.Dizzle.AggregateStateHasProperties), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::FourDeep.Dizzle.DomainCommandHasProperties), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::FourDeep.Dizzle.DomainEventHasProperties), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::FourDeep.Dizzle.EntityHasProperties), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::FourDeep.Dizzle.ViewHasProperties), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::FourDeep.Dizzle.ViewHasDomainEvents), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		internal sealed class CompartmentItemRolePlayerPositionChangeRule : DslModeling::RolePlayerPositionChangeRule 
		{
			/// <summary>
			/// Called when the order of a roleplayer in a relationship changes
			/// </summary>
			/// <param name="e"></param>
			public override void RolePlayerPositionChanged(DslModeling::RolePlayerOrderChangedEventArgs e)
			{
				RolePlayerPositionChanged(e, false);
			}
			
			internal static void RolePlayerPositionChanged(DslModeling::RolePlayerOrderChangedEventArgs e, bool repaintOnly)
			{
				if(e==null) throw new global::System.ArgumentNullException("e");
				if(typeof(global::FourDeep.Dizzle.AggregateStateHasProperties).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(!e.CounterpartDomainRole.IsSource)
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetAggregateStateForAggregateStateShapeProperties((global::FourDeep.Dizzle.Property)e.CounterpartRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::FourDeep.Dizzle.AggregateStateShape), "Properties", repaintOnly);
					}
				}
				if(typeof(global::FourDeep.Dizzle.DomainCommandHasProperties).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(!e.CounterpartDomainRole.IsSource)
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetDomainCommandForDomainCommandShapeProperties((global::FourDeep.Dizzle.Property)e.CounterpartRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::FourDeep.Dizzle.DomainCommandShape), "Properties", repaintOnly);
					}
				}
				if(typeof(global::FourDeep.Dizzle.DomainEventHasProperties).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(!e.CounterpartDomainRole.IsSource)
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetDomainEventForDomainEventShapeProperties((global::FourDeep.Dizzle.Property)e.CounterpartRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::FourDeep.Dizzle.DomainEventShape), "Properties", repaintOnly);
					}
				}
				if(typeof(global::FourDeep.Dizzle.EntityHasProperties).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(!e.CounterpartDomainRole.IsSource)
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetEntityForEntityShapeProperties((global::FourDeep.Dizzle.Property)e.CounterpartRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::FourDeep.Dizzle.EntityShape), "Properties", repaintOnly);
					}
				}
				if(typeof(global::FourDeep.Dizzle.ViewHasProperties).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(!e.CounterpartDomainRole.IsSource)
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetViewForViewShapeProperties((global::FourDeep.Dizzle.Property)e.CounterpartRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::FourDeep.Dizzle.ViewShape), "Properties", repaintOnly);
					}
				}
				if(typeof(global::FourDeep.Dizzle.ViewHasDomainEvents).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(!e.CounterpartDomainRole.IsSource)
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetViewForViewShapeEvents((global::FourDeep.Dizzle.DomainEvent)e.CounterpartRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::FourDeep.Dizzle.ViewShape), "Events", repaintOnly);
					}
				}
			}
		}
	
		/// <summary>
		/// Reroute a connector when the role players of its underlying relationship change
		/// </summary>
		[DslModeling::RuleOn(typeof(global::FourDeep.Dizzle.AggregateRootHandlesDomainCommands), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::FourDeep.Dizzle.AggregateRootHasAggregateState), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::FourDeep.Dizzle.AggregateStateSubscribesToDomainEvents), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		internal sealed class ConnectorRolePlayerChanged : DslModeling::RolePlayerChangeRule
		{
			/// <summary>
			/// Reroute a connector when the role players of its underlying relationship change
			/// </summary>
			public override void RolePlayerChanged(DslModeling::RolePlayerChangedEventArgs e)
			{
				if (e == null) throw new global::System.ArgumentNullException("e");
	
				global::System.Collections.ObjectModel.ReadOnlyCollection<DslDiagrams::PresentationViewsSubject> connectorLinks = DslDiagrams::PresentationViewsSubject.GetLinksToPresentation(e.ElementLink);
				foreach (DslDiagrams::PresentationViewsSubject connectorLink in connectorLinks)
				{
					// Fix up any binary link shapes attached to the element link.
					DslDiagrams::BinaryLinkShape linkShape = connectorLink.Presentation as DslDiagrams::BinaryLinkShape;
					if (linkShape != null)
					{
						global::FourDeep.Dizzle.DizzleDiagram diagram = linkShape.Diagram as global::FourDeep.Dizzle.DizzleDiagram;
						if (diagram != null)
						{
							if (e.NewRolePlayer != null)
							{
								DslDiagrams::NodeShape fromShape;
								DslDiagrams::NodeShape toShape;
								diagram.GetSourceAndTargetForConnector(linkShape, out fromShape, out toShape);
								if (fromShape != null && toShape != null)
								{
									if (!object.Equals(fromShape, linkShape.FromShape))
									{
										linkShape.FromShape = fromShape;
									}
									if (!object.Equals(linkShape.ToShape, toShape))
									{
										linkShape.ToShape = toShape;
									}
								}
								else
								{
									// delete the connector if we cannot find an appropriate target shape.
									linkShape.Delete();
								}
							}
							else
							{
								// delete the connector if the new role player is null.
								linkShape.Delete();
							}
						}
					}
				}
			}
		}
	}
